// MapleTable - Canadian Restaurant App
// üçÅ Built for Canada's diverse culinary landscape

class MapleTableApp {
    constructor() {
        this.currentLanguage = 'en';
        this.currentCity = 'toronto';
        this.restaurants = [];
        this.favorites = new Set();
        this.filters = {
            cuisine: 'all',
            priceRange: 'all',
            rating: 0,
            features: []
        };
        
        this.translations = {
            en: {
                'Discover Canada\'s Best Restaurants': 'Discover Canada\'s Best Restaurants',
                'Discover Canada\'s Culinary Diversity': 'Discover Canada\'s Culinary Diversity',
                'Featured This Week': 'Featured This Week',
                'Winter Menu': 'Winter Menu',
                'Canadian Cuisine': 'Canadian Cuisine',
                'Nearby Restaurants': 'Nearby Restaurants',
                'Search restaurants, cuisine, location...': 'Search restaurants, cuisine, location...',
                'All': 'All',
                'Canadian': 'Canadian',
                'Poutine': 'Poutine',
                'Maple': 'Maple',
                'Winter Warm': 'Winter Warm',
                'Halal': 'Halal',
                'Home': 'Home',
                'Search': 'Search',
                'Bookings': 'Bookings',
                'Favorites': 'Favorites',
                'Profile': 'Profile',
                'Load More': 'Load More',
                'Filters': 'Filters',
                'Canadian Classics': 'Canadian Classics',
                'Qu√©b√©cois': 'Qu√©b√©cois',
                'Maritime': 'Maritime',
                'Prairie BBQ': 'Prairie BBQ',
                'Indigenous': 'Indigenous',
                'Multicultural': 'Multicultural'
            },
            fr: {
                'Discover Canada\'s Best Restaurants': 'D√©couvrez les Meilleurs Restaurants du Canada',
                'Discover Canada\'s Culinary Diversity': 'D√©couvrez la Diversit√© Culinaire du Canada',
                'Featured This Week': '√Ä la Une Cette Semaine',
                'Winter Menu': 'Menu d\'Hiver',
                'Canadian Cuisine': 'Cuisine Canadienne',
                'Nearby Restaurants': 'Restaurants √† Proximit√©',
                'Search restaurants, cuisine, location...': 'Rechercher restaurants, cuisine, lieu...',
                'All': 'Tous',
                'Canadian': 'Canadien',
                'Poutine': 'Poutine',
                'Maple': '√ârable',
                'Winter Warm': 'Chaud d\'Hiver',
                'Halal': 'Halal',
                'Home': 'Accueil',
                'Search': 'Recherche',
                'Bookings': 'R√©servations',
                'Favorites': 'Favoris',
                'Profile': 'Profil',
                'Load More': 'Charger Plus',
                'Filters': 'Filtres',
                'Canadian Classics': 'Classiques Canadiens',
                'Qu√©b√©cois': 'Qu√©b√©cois',
                'Maritime': 'Maritime',
                'Prairie BBQ': 'BBQ des Prairies',
                'Indigenous': 'Autochtone',
                'Multicultural': 'Multiculturel'
            }
        };
        
        this.initializeApp();
    }
    
    initializeApp() {
        this.loadCanadianRestaurants();
        this.setupEventListeners();
        this.updateWeather();
        
        // ÈöêËóèÂêØÂä®Â±èÂπïÔºåÊòæÁ§∫‰∏ªÂ∫îÁî®
        setTimeout(() => {
            document.getElementById('splashScreen').style.display = 'none';
            document.getElementById('mainApp').style.display = 'block';
            this.renderRestaurants();
        }, 2500);
    }
    
    // Âä†ËΩΩÁúüÂÆûÁöÑÂä†ÊãøÂ§ßÈ§êÂéÖÊï∞ÊçÆ
    loadCanadianRestaurants() {
        this.restaurants = [
            // Toronto Restaurants
            {
                id: 1,
                name: 'The CN Tower Restaurant',
                nameF: 'Restaurant de la Tour CN',
                cuisine: 'Canadian Fine Dining',
                cuisineF: 'Grande Cuisine Canadienne',
                city: 'toronto',
                rating: 4.8,
                reviewCount: 2847,
                priceRange: 'CAD $80-120',
                image: 'https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=400&h=300&fit=crop',
                features: ['Heated Patio', 'City Views', 'Wheelchair Accessible', 'Valet Parking'],
                featuresF: ['Terrasse Chauff√©e', 'Vue sur la Ville', 'Accessible Fauteuil Roulant', 'Voiturier'],
                badges: ['Fine Dining', 'Iconic'],
                badgesF: ['Grande Cuisine', 'Iconique'],
                cuisine_type: 'canadian-classics',
                description: 'Revolving restaurant atop Toronto\'s iconic CN Tower with panoramic city views and premium Canadian cuisine featuring local ingredients.',
                descriptionF: 'Restaurant tournant au sommet de la Tour CN iconique de Toronto avec vue panoramique sur la ville et cuisine canadienne haut de gamme mettant en vedette des ingr√©dients locaux.',
                address: '290 Bremner Blvd, Toronto, ON M5V 3L9',
                phone: '(416) 362-5411',
                winterFeatures: ['Heated Interior', 'Hot Maple Cider', 'Winter Tasting Menu'],
                winterFeaturesF: ['Int√©rieur Chauff√©', 'Cidre d\'√ârable Chaud', 'Menu D√©gustation d\'Hiver']
            },
            {
                id: 2,
                name: 'Poutinerie Au Pied de Cochon',
                nameF: 'Poutinerie Au Pied de Cochon',
                cuisine: 'Qu√©b√©cois Comfort Food',
                cuisineF: 'Cuisine R√©confortante Qu√©b√©coise',
                city: 'toronto',
                rating: 4.6,
                reviewCount: 1523,
                priceRange: 'CAD $15-30',
                image: 'https://images.unsplash.com/photo-1630409346828-a22b0ba8b5bb?w=400&h=300&fit=crop',
                features: ['Authentic Poutine', 'Maple Syrup Dishes', 'Cozy Interior', 'Late Night'],
                featuresF: ['Poutine Authentique', 'Plats au Sirop d\'√ârable', 'Int√©rieur Chaleureux', 'Tard le Soir'],
                badges: ['Local Favorite', 'Authentic'],
                badgesF: ['Favori Local', 'Authentique'],
                cuisine_type: 'quebec-french',
                description: 'Authentic Qu√©b√©cois poutinerie serving traditional curds and gravy with creative toppings, plus maple syrup desserts.',
                descriptionF: 'Poutinerie qu√©b√©coise authentique servant fromage en grains et sauce traditionnels avec garnitures cr√©atives, plus desserts au sirop d\'√©rable.',
                address: '382 Queen Street West, Toronto, ON M5V 2A7',
                phone: '(416) 977-0998',
                winterFeatures: ['Hearty Portions', 'Hot Comfort Food', 'Warm Atmosphere'],
                winterFeaturesF: ['Portions G√©n√©reuses', 'Nourriture R√©confortante Chaude', 'Atmosph√®re Chaleureuse']
            },
            {
                id: 3,
                name: 'The Keg Mansion',
                nameF: 'Le Manoir Keg',
                cuisine: 'Canadian Steakhouse',
                cuisineF: 'Steakhouse Canadien',
                city: 'toronto',
                rating: 4.7,
                reviewCount: 3256,
                priceRange: 'CAD $50-85',
                image: 'https://images.unsplash.com/photo-1558618644-fcd25c85cd64?w=400&h=300&fit=crop',
                features: ['Alberta Beef', 'Historic Building', 'Full Bar', 'Private Dining'],
                featuresF: ['B≈ìuf d\'Alberta', 'B√¢timent Historique', 'Bar Complet', 'Salle Priv√©e'],
                badges: ['Premium Steaks', 'Historic'],
                badgesF: ['Steaks Haut de Gamme', 'Historique'],
                cuisine_type: 'prairie',
                description: 'Upscale steakhouse in historic mansion featuring premium Alberta beef, fresh seafood, and extensive Canadian wine list.',
                descriptionF: 'Steakhouse haut de gamme dans un manoir historique proposant du b≈ìuf d\'Alberta haut de gamme, des fruits de mer frais et une vaste carte de vins canadiens.',
                address: '515 Jarvis Street, Toronto, ON M4Y 2H9',
                phone: '(416) 964-6609',
                winterFeatures: ['Fireplace Dining', 'Rich Winter Menu', 'Warm Service'],
                winterFeaturesF: ['D√Æner au Coin du Feu', 'Menu d\'Hiver Riche', 'Service Chaleureux']
            },
            
            // Vancouver Restaurants
            {
                id: 4,
                name: 'Granville Island Public Market',
                nameF: 'March√© Public de Granville Island',
                cuisine: 'West Coast Fresh Market',
                cuisineF: 'March√© Frais de la C√¥te Ouest',
                city: 'vancouver',
                rating: 4.5,
                reviewCount: 8945,
                priceRange: 'CAD $8-25',
                image: 'https://images.unsplash.com/photo-1555396273-367ea4eb4db5?w=400&h=300&fit=crop',
                features: ['Fresh Seafood', 'Local Produce', 'Artisan Foods', 'Waterfront Views'],
                featuresF: ['Fruits de Mer Frais', 'Produits Locaux', 'Aliments Artisanaux', 'Vue sur l\'Eau'],
                badges: ['Fresh Market', 'Local'],
                badgesF: ['March√© Frais', 'Local'],
                cuisine_type: 'maritime',
                description: 'Iconic public market featuring fresh BC seafood, local produce, artisan breads, and specialty foods from over 50 vendors.',
                descriptionF: 'March√© public iconique proposant fruits de mer frais de la CB, produits locaux, pains artisanaux et aliments sp√©cialis√©s de plus de 50 vendeurs.',
                address: '1669 Johnston St, Vancouver, BC V6H 3R9',
                phone: '(604) 666-5784',
                winterFeatures: ['Indoor Market', 'Hot Soups', 'Fresh Oysters'],
                winterFeaturesF: ['March√© Int√©rieur', 'Soupes Chaudes', 'Hu√Ætres Fra√Æches']
            },
            {
                id: 5,
                name: 'Salmon n\' Bannock',
                nameF: 'Saumon et Bannique',
                cuisine: 'Indigenous Canadian',
                cuisineF: 'Autochtone Canadien',
                city: 'vancouver',
                rating: 4.9,
                reviewCount: 756,
                priceRange: 'CAD $35-65',
                image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop',
                features: ['Wild Game', 'Traditional Bannock', 'Indigenous Ingredients', 'Cultural Experience'],
                featuresF: ['Gibier', 'Bannique Traditionnelle', 'Ingr√©dients Autochtones', 'Exp√©rience Culturelle'],
                badges: ['Indigenous', 'Cultural'],
                badgesF: ['Autochtone', 'Culturel'],
                cuisine_type: 'indigenous',
                description: 'First Nations restaurant showcasing traditional Indigenous cuisine with modern techniques, featuring wild game, seafood, and foraged ingredients.',
                descriptionF: 'Restaurant des Premi√®res Nations pr√©sentant la cuisine autochtone traditionnelle avec des techniques modernes, mettant en vedette gibier, fruits de mer et ingr√©dients de cueillette.',
                address: '1128 W Broadway, Vancouver, BC V6H 1G5',
                phone: '(604) 568-8971',
                winterFeatures: ['Hearty Stews', 'Traditional Teas', 'Warm Atmosphere'],
                winterFeaturesF: ['Rago√ªts Copieux', 'Th√©s Traditionnels', 'Atmosph√®re Chaleureuse']
            },
            
            // Montreal Restaurants
            {
                id: 6,
                name: 'Schwartz\'s Hebrew Delicatessen',
                nameF: 'Charcuterie H√©bra√Øque Schwartz\'s',
                cuisine: 'Montreal Deli',
                cuisineF: 'Charcuterie de Montr√©al',
                city: 'montreal',
                rating: 4.4,
                reviewCount: 12847,
                priceRange: 'CAD $15-35',
                image: 'https://images.unsplash.com/photo-1509440159596-0249088772ff?w=400&h=300&fit=crop',
                features: ['Smoked Meat', 'Historic Deli', 'Cash Only', 'No Reservations'],
                featuresF: ['Viande Fum√©e', 'Charcuterie Historique', 'Comptant Seulement', 'Pas de R√©servations'],
                badges: ['Historic', 'Famous'],
                badgesF: ['Historique', 'C√©l√®bre'],
                cuisine_type: 'quebec-french',
                description: 'Legendary Montreal institution since 1928, famous for hand-sliced smoked meat sandwiches and traditional Jewish deli fare.',
                descriptionF: 'Institution l√©gendaire de Montr√©al depuis 1928, c√©l√®bre pour ses sandwichs de viande fum√©e tranch√©e √† la main et sa cuisine de charcuterie juive traditionnelle.',
                address: '3895 Saint-Laurent Blvd, Montreal, QC H2W 1X9',
                phone: '(514) 842-4813',
                winterFeatures: ['Hot Smoked Meat', 'Warm Interior', 'Comfort Food'],
                winterFeaturesF: ['Viande Fum√©e Chaude', 'Int√©rieur Chaleureux', 'Nourriture R√©confortante']
            },
            {
                id: 7,
                name: 'Au Pied de Cochon',
                nameF: 'Au Pied de Cochon',
                cuisine: 'Quebecois Fine Dining',
                cuisineF: 'Grande Cuisine Qu√©b√©coise',
                city: 'montreal',
                rating: 4.7,
                reviewCount: 2156,
                priceRange: 'CAD $65-95',
                image: 'https://images.unsplash.com/photo-1559339352-11d035aa65de?w=400&h=300&fit=crop',
                features: ['Foie Gras', 'Duck Poutine', 'Maple Syrup', 'Rich Cuisine'],
                featuresF: ['Foie Gras', 'Poutine au Canard', 'Sirop d\'√ârable', 'Cuisine Riche'],
                badges: ['Celebrity Chef', 'Indulgent'],
                badgesF: ['Chef C√©l√®bre', 'Gourmand'],
                cuisine_type: 'quebec-french',
                description: 'Martin Picard\'s famous restaurant featuring indulgent Quebecois cuisine with foie gras, duck fat, and creative poutine variations.',
                descriptionF: 'Restaurant c√©l√®bre de Martin Picard proposant une cuisine qu√©b√©coise gourmande avec foie gras, gras de canard et variations cr√©atives de poutine.',
                address: '536 Avenue Duluth E, Montreal, QC H2L 1A9',
                phone: '(514) 281-1114',
                winterFeatures: ['Rich Winter Menu', 'Comfort Food', 'Warm Ambiance'],
                winterFeaturesF: ['Menu d\'Hiver Riche', 'Nourriture R√©confortante', 'Ambiance Chaleureuse']
            },
            
            // Calgary Restaurants
            {
                id: 8,
                name: 'Caesar\'s Steakhouse',
                nameF: 'Steakhouse Caesar\'s',
                cuisine: 'Alberta Steakhouse',
                cuisineF: 'Steakhouse de l\'Alberta',
                city: 'calgary',
                rating: 4.6,
                reviewCount: 1845,
                priceRange: 'CAD $60-110',
                image: 'https://images.unsplash.com/photo-1546833999-b9f581a1996d?w=400&h=300&fit=crop',
                features: ['AAA Alberta Beef', 'Caesar Cocktails', 'Western Atmosphere', 'Live Music'],
                featuresF: ['B≈ìuf AAA de l\'Alberta', 'Cocktails C√©sar', 'Atmosph√®re Western', 'Musique Live'],
                badges: ['Premium Beef', 'Western'],
                badgesF: ['B≈ìuf Haut de Gamme', 'Western'],
                cuisine_type: 'prairie',
                description: 'Classic Alberta steakhouse specializing in AAA Alberta beef, famous Caesar cocktails, and authentic western Canadian hospitality.',
                descriptionF: 'Steakhouse classique de l\'Alberta sp√©cialis√© dans le b≈ìuf AAA de l\'Alberta, les c√©l√®bres cocktails C√©sar et l\'hospitalit√© authentique de l\'ouest canadien.',
                address: '512 4th Ave SW, Calgary, AB T2P 0J9',
                phone: '(403) 264-1222',
                winterFeatures: ['Hearty Steaks', 'Warm Interior', 'Comfort Classics'],
                winterFeaturesF: ['Steaks Copieux', 'Int√©rieur Chaleureux', 'Classiques R√©confortants']
            },
            
            // Halifax Restaurants
            {
                id: 9,
                name: 'The Bicycle Thief',
                nameF: 'Le Voleur de Bicyclette',
                cuisine: 'Maritime Italian',
                cuisineF: 'Italien Maritime',
                city: 'halifax',
                rating: 4.8,
                reviewCount: 967,
                priceRange: 'CAD $40-75',
                image: 'https://images.unsplash.com/photo-1551218808-94e220e084d2?w=400&h=300&fit=crop',
                features: ['Waterfront Dining', 'Fresh Seafood', 'Italian-Canadian Fusion', 'Patio Dining'],
                featuresF: ['D√Æner au Bord de l\'Eau', 'Fruits de Mer Frais', 'Fusion Italo-Canadienne', 'Terrasse'],
                badges: ['Waterfront', 'Fusion'],
                badgesF: ['Bord de l\'Eau', 'Fusion'],
                cuisine_type: 'maritime',
                description: 'Waterfront restaurant combining Italian cuisine with fresh Maritime seafood, featuring lobster pasta and Atlantic scallops.',
                descriptionF: 'Restaurant au bord de l\'eau combinant cuisine italienne et fruits de mer frais des Maritimes, proposant p√¢tes au homard et p√©toncles de l\'Atlantique.',
                address: '1475 Lower Water St, Halifax, NS B3J 3Z2',
                phone: '(902) 425-7993',
                winterFeatures: ['Indoor Dining', 'Hearty Pasta', 'Warm Service'],
                winterFeaturesF: ['D√Æner Int√©rieur', 'P√¢tes Copieuses', 'Service Chaleureux']
            },
            
            // Multicultural Restaurants
            {
                id: 10,
                name: 'Little India Restaurant',
                nameF: 'Restaurant Little India',
                cuisine: 'Indian-Canadian',
                cuisineF: 'Indo-Canadien',
                city: 'toronto',
                rating: 4.5,
                reviewCount: 2341,
                priceRange: 'CAD $20-40',
                image: 'https://images.unsplash.com/photo-1585937421612-70a008356fbe?w=400&h=300&fit=crop',
                features: ['Halal Options', 'Vegetarian Friendly', 'Spice Levels', 'Family Style'],
                featuresF: ['Options Halal', 'V√©g√©tarien Friendly', 'Niveaux d\'√âpices', 'Style Familial'],
                badges: ['Halal', 'Authentic'],
                badgesF: ['Halal', 'Authentique'],
                cuisine_type: 'multicultural',
                description: 'Authentic Indian cuisine adapted for Canadian tastes, featuring traditional curries, tandoor specialties, and vegetarian options.',
                descriptionF: 'Cuisine indienne authentique adapt√©e aux go√ªts canadiens, proposant currys traditionnels, sp√©cialit√©s tandoor et options v√©g√©tariennes.',
                address: '1334 Gerrard Street E, Toronto, ON M4L 1Y7',
                phone: '(416) 461-3472',
                winterFeatures: ['Spicy Warmth', 'Hot Curries', 'Comfort Spices'],
                winterFeaturesF: ['Chaleur √âpic√©e', 'Currys Chauds', '√âpices R√©confortantes']
            },
            
            // MapleTable Restaurant - Main Test Restaurant
            {
                id: 'rest_001',
                name: 'The Maple Leaf Restaurant',
                nameF: 'Restaurant Feuille d\'√ârable',
                cuisine: 'Canadian Fine Dining',
                cuisineF: 'Grande Cuisine Canadienne',
                city: 'toronto',
                rating: 4.9,
                reviewCount: 1847,
                priceRange: 'CAD $60-95',
                image: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop',
                features: ['AI Table Allocation', 'Seasonal Menu', 'Wine Pairing', 'Private Events'],
                featuresF: ['Allocation de Table IA', 'Menu Saisonnier', 'Accord Mets-Vins', '√âv√©nements Priv√©s'],
                badges: ['AI-Powered', 'Locally Sourced', 'Award Winning'],
                badgesF: ['Aliment√© par IA', 'Sources Locales', 'Prim√©'],
                cuisine_type: 'canadian-classics',
                description: 'Experience the future of dining with our AI-powered table allocation system. Enjoy premium Canadian cuisine featuring locally sourced ingredients and expertly crafted seasonal menus.',
                descriptionF: 'D√©couvrez l\'avenir de la restauration avec notre syst√®me d\'allocation de tables aliment√© par IA. Savourez une cuisine canadienne haut de gamme mettant en vedette des ingr√©dients d\'origine locale et des menus saisonniers expertement con√ßus.',
                address: '123 Maple Street, Toronto, ON M5V 3A8',
                phone: '(416) 555-MAPLE',
                winterFeatures: ['Cozy Fireplace', 'Winter Tasting Menu', 'Hot Maple Toddy', 'AI Smart Seating'],
                winterFeaturesF: ['Foyer Chaleureux', 'Menu D√©gustation d\'Hiver', 'Grog √† l\'√ârable Chaud', 'Places Intelligentes IA']
            }
        ];
    }
    
    // ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨Âô®
    setupEventListeners() {
        // Á≠õÈÄâËäØÁâá‰∫ã‰ª∂
        document.querySelectorAll('.filter-chip').forEach(chip => {
            chip.addEventListener('click', (e) => {
                document.querySelectorAll('.filter-chip').forEach(c => c.classList.remove('active'));
                e.target.classList.add('active');
                this.filters.cuisine = e.target.dataset.filter;
                this.renderRestaurants();
            });
        });
        
        // ÊêúÁ¥¢‰∫ã‰ª∂
        document.getElementById('searchInput').addEventListener('input', (e) => {
            this.handleSearch(e.target.value);
        });
        
        // Â∫ïÈÉ®ÂØºËà™‰∫ã‰ª∂
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', () => {
                document.querySelectorAll('.nav-item').forEach(i => i.classList.remove('active'));
                item.classList.add('active');
            });
        });
    }
    
    // ËØ≠Ë®ÄÂàáÊç¢
    toggleLanguage() {
        this.currentLanguage = this.currentLanguage === 'en' ? 'fr' : 'en';
        document.getElementById('currentLang').textContent = this.currentLanguage.toUpperCase();
        this.updateTranslations();
        this.renderRestaurants();
    }
    
    // Êõ¥Êñ∞ÁøªËØë
    updateTranslations() {
        document.querySelectorAll('[data-en]').forEach(element => {
            const enText = element.getAttribute('data-en');
            const frText = element.getAttribute('data-fr');
            if (this.currentLanguage === 'fr' && frText) {
                if (element.tagName === 'INPUT') {
                    element.placeholder = frText;
                } else {
                    element.textContent = frText;
                }
            } else if (enText) {
                if (element.tagName === 'INPUT') {
                    element.placeholder = enText;
                } else {
                    element.textContent = enText;
                }
            }
        });
        
        // Êõ¥Êñ∞È°µÈù¢Ê†áÈ¢ò
        const titleKey = 'Discover Canada\'s Best Restaurants';
        document.title = this.translations[this.currentLanguage][titleKey] || titleKey;
    }
    
    // ÂüéÂ∏ÇÂàáÊç¢
    changeCity(city) {
        this.currentCity = city;
        this.renderRestaurants();
        this.updateWeather();
    }
    
    // Êõ¥Êñ∞Â§©Ê∞î‰ø°ÊÅØ
    updateWeather() {
        const weatherTemps = {
            'toronto': '-8¬∞C',
            'vancouver': '4¬∞C',
            'montreal': '-12¬∞C',
            'calgary': '-15¬∞C',
            'ottawa': '-10¬∞C',
            'edmonton': '-18¬∞C',
            'winnipeg': '-20¬∞C',
            'quebec': '-14¬∞C',
            'halifax': '2¬∞C'
        };
        
        document.getElementById('weatherTemp').textContent = weatherTemps[this.currentCity] || '-5¬∞C';
    }
    
    // Ê∏≤ÊüìÈ§êÂéÖÂàóË°®
    renderRestaurants() {
        const container = document.getElementById('restaurantsList');
        let filteredRestaurants = this.restaurants.filter(restaurant => {
            // ÂüéÂ∏ÇÁ≠õÈÄâ
            if (restaurant.city !== this.currentCity) return false;
            
            // ËèúÁ≥ªÁ≠õÈÄâ
            if (this.filters.cuisine !== 'all') {
                if (this.filters.cuisine === 'canadian' && !restaurant.cuisine_type.includes('canadian')) return false;
                if (this.filters.cuisine === 'poutine' && !restaurant.features.some(f => f.toLowerCase().includes('poutine'))) return false;
                if (this.filters.cuisine === 'maple' && !restaurant.features.some(f => f.toLowerCase().includes('maple'))) return false;
                if (this.filters.cuisine === 'winter-warm' && !restaurant.winterFeatures) return false;
                if (this.filters.cuisine === 'halal' && !restaurant.features.some(f => f.toLowerCase().includes('halal'))) return false;
            }
            
            return true;
        });
        
        container.innerHTML = '';
        
        filteredRestaurants.forEach(restaurant => {
            const card = this.createRestaurantCard(restaurant);
            container.appendChild(card);
        });
        
        if (filteredRestaurants.length === 0) {
            container.innerHTML = `
                <div class="no-results">
                    <i class="fas fa-search" style="font-size: 3rem; color: var(--light-text); margin-bottom: 1rem;"></i>
                    <h3 style="color: var(--medium-text);">${this.currentLanguage === 'fr' ? 'Aucun restaurant trouv√©' : 'No restaurants found'}</h3>
                    <p style="color: var(--light-text);">${this.currentLanguage === 'fr' ? 'Essayez de modifier vos filtres de recherche.' : 'Try adjusting your search filters.'}</p>
                </div>
            `;
        }
    }
    
    // ÂàõÂª∫È§êÂéÖÂç°Áâá
    createRestaurantCard(restaurant) {
        const card = document.createElement('div');
        card.className = 'restaurant-card';
        card.onclick = () => this.showRestaurantDetails(restaurant.id);
        
        const name = this.currentLanguage === 'fr' && restaurant.nameF ? restaurant.nameF : restaurant.name;
        const cuisine = this.currentLanguage === 'fr' && restaurant.cuisineF ? restaurant.cuisineF : restaurant.cuisine;
        const description = this.currentLanguage === 'fr' && restaurant.descriptionF ? restaurant.descriptionF : restaurant.description;
        const features = this.currentLanguage === 'fr' && restaurant.featuresF ? restaurant.featuresF : restaurant.features;
        const badges = this.currentLanguage === 'fr' && restaurant.badgesF ? restaurant.badgesF : restaurant.badges;
        const winterFeatures = this.currentLanguage === 'fr' && restaurant.winterFeaturesF ? restaurant.winterFeaturesF : restaurant.winterFeatures;
        
        const isFavorite = this.favorites.has(restaurant.id);
        
        card.innerHTML = `
            <div class="restaurant-header">
                <img src="${restaurant.image}" alt="${name}" class="restaurant-image">
                <div class="restaurant-badges">
                    ${badges.map(badge => `<div class="card-badge">${badge}</div>`).join('')}
                    ${winterFeatures ? '<div class="card-badge seasonal"><i class="fas fa-snowflake"></i> Winter Ready</div>' : ''}
                </div>
                <button class="restaurant-favorite ${isFavorite ? 'active' : ''}" onclick="event.stopPropagation(); app.toggleFavorite(${restaurant.id})">
                    <i class="fas fa-heart"></i>
                </button>
            </div>
            <div class="restaurant-content">
                <div class="restaurant-title">
                    <div>
                        <h3 class="restaurant-name">${name}</h3>
                        <p class="restaurant-cuisine">${cuisine}</p>
                    </div>
                    <div class="restaurant-rating">
                        <i class="fas fa-star"></i>
                        ${restaurant.rating}
                    </div>
                </div>
                <div class="restaurant-info">
                    <div class="info-item">
                        <i class="fas fa-dollar-sign"></i>
                        <span>${restaurant.priceRange}</span>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-users"></i>
                        <span>${restaurant.reviewCount} reviews</span>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-phone"></i>
                        <span>${restaurant.phone}</span>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-snowflake"></i>
                        <span>${this.currentLanguage === 'fr' ? 'Pr√™t pour l\'hiver' : 'Winter Ready'}</span>
                    </div>
                </div>
                <p style="color: var(--medium-text); font-size: var(--font-sm); margin: var(--spacing-md) 0; line-height: 1.5;">
                    ${description.substring(0, 120)}...
                </p>
                <div class="restaurant-features">
                    ${features.slice(0, 3).map(feature => `<span class="feature-tag">${feature}</span>`).join('')}
                    ${winterFeatures ? `<span class="feature-tag winter-feature"><i class="fas fa-snowflake"></i> ${winterFeatures[0]}</span>` : ''}
                </div>
                <div class="restaurant-actions">
                    <button class="btn btn-secondary" onclick="event.stopPropagation(); app.callRestaurant('${restaurant.phone}')">
                        <i class="fas fa-phone"></i> ${this.currentLanguage === 'fr' ? 'Appeler' : 'Call'}
                    </button>
                    <a href="booking.html?restaurant=${restaurant.id}" class="btn btn-primary" onclick="event.stopPropagation(); localStorage.setItem('selectedRestaurant', JSON.stringify({id: '${restaurant.id}', name: '${restaurant.name}', nameF: '${restaurant.nameF || restaurant.name}', cuisine: '${restaurant.cuisine}', cuisineF: '${restaurant.cuisineF || restaurant.cuisine}', rating: ${restaurant.rating}, reviewCount: ${restaurant.reviewCount}, image: '${restaurant.image}', phone: '${restaurant.phone || ''}', address: '${restaurant.address || ''}', features: ${JSON.stringify(restaurant.features || [])}, winterFeatures: ${JSON.stringify(restaurant.winterFeatures || [])}}));console.log('üçÅ Stored restaurant data for booking:', JSON.parse(localStorage.getItem('selectedRestaurant')));">
                        <i class="fas fa-calendar-plus"></i> ${this.currentLanguage === 'fr' ? 'R√©server' : 'Book'}
                    </a>
                </div>
            </div>
        `;
        
        return card;
    }
    
    // ÊòæÁ§∫È§êÂéÖËØ¶ÊÉÖ
    showRestaurantDetails(restaurantId) {
        const restaurant = this.restaurants.find(r => r.id === restaurantId);
        if (!restaurant) return;
        
        const modal = document.getElementById('restaurantModal');
        const content = modal.querySelector('.modal-content');
        
        const name = this.currentLanguage === 'fr' && restaurant.nameF ? restaurant.nameF : restaurant.name;
        const cuisine = this.currentLanguage === 'fr' && restaurant.cuisineF ? restaurant.cuisineF : restaurant.cuisine;
        const description = this.currentLanguage === 'fr' && restaurant.descriptionF ? restaurant.descriptionF : restaurant.description;
        const features = this.currentLanguage === 'fr' && restaurant.featuresF ? restaurant.featuresF : restaurant.features;
        const winterFeatures = this.currentLanguage === 'fr' && restaurant.winterFeaturesF ? restaurant.winterFeaturesF : restaurant.winterFeatures;
        
        content.innerHTML = `
            <div class="modal-header">
                <button class="close-btn" onclick="app.closeModal()">&times;</button>
            </div>
            <div class="restaurant-detail-image">
                <img src="${restaurant.image}" alt="${name}">
            </div>
            <div class="restaurant-detail-content">
                <h2>${name}</h2>
                <p class="cuisine">${cuisine}</p>
                <div class="rating">
                    <i class="fas fa-star"></i>
                    ${restaurant.rating} (${restaurant.reviewCount} ${this.currentLanguage === 'fr' ? 'avis' : 'reviews'})
                </div>
                <p class="description">${description}</p>
                
                <div class="details-section">
                    <h3><i class="fas fa-info-circle"></i> ${this.currentLanguage === 'fr' ? 'Informations' : 'Information'}</h3>
                    <div class="details-grid">
                        <div><strong>${this.currentLanguage === 'fr' ? 'Prix' : 'Price'}:</strong> ${restaurant.priceRange}</div>
                        <div><strong>${this.currentLanguage === 'fr' ? 'T√©l√©phone' : 'Phone'}:</strong> ${restaurant.phone}</div>
                        <div><strong>${this.currentLanguage === 'fr' ? 'Adresse' : 'Address'}:</strong> ${restaurant.address}</div>
                    </div>
                </div>
                
                <div class="details-section">
                    <h3><i class="fas fa-star"></i> ${this.currentLanguage === 'fr' ? 'Caract√©ristiques' : 'Features'}</h3>
                    <div class="features-list">
                        ${features.map(feature => `<span class="feature-tag">${feature}</span>`).join('')}
                    </div>
                </div>
                
                ${winterFeatures ? `
                    <div class="details-section winter-section">
                        <h3><i class="fas fa-snowflake"></i> ${this.currentLanguage === 'fr' ? 'Sp√©cialit√©s d\'Hiver' : 'Winter Specialties'}</h3>
                        <div class="features-list">
                            ${winterFeatures.map(feature => `<span class="feature-tag winter-feature">${feature}</span>`).join('')}
                        </div>
                    </div>
                ` : ''}
                
                <div class="modal-actions">
                    <button class="btn btn-secondary" onclick="app.callRestaurant('${restaurant.phone}')">
                        <i class="fas fa-phone"></i> ${this.currentLanguage === 'fr' ? 'Appeler' : 'Call'}
                    </button>
                    <a href="booking.html?restaurant=${restaurant.id}" class="btn btn-primary" onclick="localStorage.setItem('selectedRestaurant', JSON.stringify({id: '${restaurant.id}', name: '${restaurant.name}', nameF: '${restaurant.nameF || restaurant.name}', cuisine: '${restaurant.cuisine}', cuisineF: '${restaurant.cuisineF || restaurant.cuisine}', rating: ${restaurant.rating}, reviewCount: ${restaurant.reviewCount}, image: '${restaurant.image}', phone: '${restaurant.phone || ''}', address: '${restaurant.address || ''}', features: ${JSON.stringify(restaurant.features || [])}, winterFeatures: ${JSON.stringify(restaurant.winterFeatures || [])}}));console.log('üçÅ Stored restaurant data for booking:', JSON.parse(localStorage.getItem('selectedRestaurant')));">
                        <i class="fas fa-calendar-plus"></i> ${this.currentLanguage === 'fr' ? 'R√©server' : 'Book Now'}
                    </a>
                </div>
            </div>
        `;
        
        modal.classList.add('show');
    }
    
    // ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
    closeModal() {
        document.querySelectorAll('.modal').forEach(modal => {
            modal.classList.remove('show');
        });
    }
    
    // ÂàáÊç¢Êî∂ËóèÁä∂ÊÄÅ
    toggleFavorite(restaurantId) {
        if (this.favorites.has(restaurantId)) {
            this.favorites.delete(restaurantId);
        } else {
            this.favorites.add(restaurantId);
        }
        
        // Êõ¥Êñ∞UI
        document.querySelectorAll(`.restaurant-favorite`).forEach(btn => {
            if (btn.onclick.toString().includes(`${restaurantId}`)) {
                btn.classList.toggle('active', this.favorites.has(restaurantId));
            }
        });
        
        // ‰øùÂ≠òÂà∞Êú¨Âú∞Â≠òÂÇ®
        localStorage.setItem('mapleFavorites', JSON.stringify([...this.favorites]));
        
        this.showNotification(
            this.favorites.has(restaurantId) ? 
            (this.currentLanguage === 'fr' ? 'Ajout√© aux favoris' : 'Added to favorites') :
            (this.currentLanguage === 'fr' ? 'Retir√© des favoris' : 'Removed from favorites')
        );
    }
    
    // È¢ÑËÆ¢È§êÂéÖ
    bookRestaurant(restaurantId) {
        console.log('üîÑ bookRestaurant Ë¢´Ë∞ÉÁî®, ID:', restaurantId, 'Á±ªÂûã:', typeof restaurantId);
        console.log('üìä ÂΩìÂâçÈ§êÂéÖÊï∞ÊçÆ:', this.restaurants.map(r => ({ id: r.id, name: r.name })));
        
        const restaurant = this.restaurants.find(r => r.id == restaurantId); // ‰ΩøÁî® == ËÄå‰∏çÊòØ ===
        if (!restaurant) {
            console.error('‚ùó Restaurant not found:', restaurantId);
            console.error('ÂèØÁî®ÁöÑÈ§êÂéÖ IDs:', this.restaurants.map(r => r.id));
            alert('È§êÂéÖ‰∏çÂ≠òÂú®ÔºåID: ' + restaurantId);
            return;
        }
        
        console.log('‚úÖ ÊâæÂà∞È§êÂéÖ:', restaurant.name);
        console.log('üìù Ë∑≥ËΩ¨Âà∞È¢ÑËÆ¢È°µÈù¢:', restaurant.name);
        
        // Â≠òÂÇ®ÈÄâ‰∏≠ÁöÑÈ§êÂéÖ‰ø°ÊÅØÂà∞localStorage
        localStorage.setItem('selectedRestaurant', JSON.stringify({
            id: restaurant.id,
            name: restaurant.name,
            nameF: restaurant.nameF,
            cuisine: restaurant.cuisine,
            cuisineF: restaurant.cuisineF,
            rating: restaurant.rating,
            reviewCount: restaurant.reviewCount,
            image: restaurant.image,
            phone: restaurant.phone,
            address: restaurant.address,
            winterFeatures: restaurant.winterFeatures,
            winterFeaturesF: restaurant.winterFeaturesF
        }));
        
        // Áõ¥Êé•Ë∑≥ËΩ¨Âà∞È¢ÑËÆ¢È°µÈù¢
        window.location.href = `booking.html?restaurant=${restaurantId}`;
    }
    
    // Êã®ÊâìÁîµËØù
    callRestaurant(phone) {
        if (confirm(`Call ${phone}?`)) {
            window.location.href = `tel:${phone}`;
        }
    }
    
    // ÊêúÁ¥¢Â§ÑÁêÜ
    handleSearch(query) {
        if (!query || query.length < 2) {
            this.renderRestaurants();
            return;
        }
        
        const filtered = this.restaurants.filter(restaurant => {
            const searchText = `
                ${restaurant.name} 
                ${restaurant.nameF || ''} 
                ${restaurant.cuisine} 
                ${restaurant.cuisineF || ''} 
                ${restaurant.description} 
                ${restaurant.descriptionF || ''}
                ${restaurant.features.join(' ')}
                ${restaurant.featuresF ? restaurant.featuresF.join(' ') : ''}
            `.toLowerCase();
            
            return searchText.includes(query.toLowerCase()) && restaurant.city === this.currentCity;
        });
        
        this.renderFilteredRestaurants(filtered);
    }
    
    // Ê∏≤ÊüìÁ≠õÈÄâÂêéÁöÑÈ§êÂéÖ
    renderFilteredRestaurants(restaurants) {
        const container = document.getElementById('restaurantsList');
        container.innerHTML = '';
        
        restaurants.forEach(restaurant => {
            const card = this.createRestaurantCard(restaurant);
            container.appendChild(card);
        });
        
        if (restaurants.length === 0) {
            container.innerHTML = `
                <div class="no-results" style="text-align: center; padding: 3rem 1rem;">
                    <i class="fas fa-search" style="font-size: 3rem; color: var(--light-text); margin-bottom: 1rem;"></i>
                    <h3 style="color: var(--medium-text);">${this.currentLanguage === 'fr' ? 'Aucun restaurant trouv√©' : 'No restaurants found'}</h3>
                    <p style="color: var(--light-text);">${this.currentLanguage === 'fr' ? 'Essayez de modifier vos termes de recherche.' : 'Try adjusting your search terms.'}</p>
                </div>
            `;
        }
    }
    
    // ÊòæÁ§∫ÈÄöÁü•
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.style.cssText = `
            position: fixed;
            top: 100px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--canadian-red);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 25px;
            box-shadow: var(--shadow);
            z-index: 4000;
            font-weight: 600;
            animation: slideInDown 0.3s ease;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOutUp 0.3s ease forwards';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
    
    // ËØ≠Èü≥ÊêúÁ¥¢
    startVoiceSearch() {
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.lang = this.currentLanguage === 'fr' ? 'fr-CA' : 'en-CA';
            recognition.continuous = false;
            recognition.interimResults = false;
            
            recognition.onstart = () => {
                this.showNotification(
                    this.currentLanguage === 'fr' ? '√âcoute en cours...' : 'Listening...'
                );
            };
            
            recognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript;
                document.getElementById('searchInput').value = transcript;
                this.handleSearch(transcript);
            };
            
            recognition.onerror = () => {
                this.showNotification(
                    this.currentLanguage === 'fr' ? 'Erreur de reconnaissance vocale' : 'Voice recognition error'
                );
            };
            
            recognition.start();
        } else {
            this.showNotification(
                this.currentLanguage === 'fr' ? 'Reconnaissance vocale non support√©e' : 'Voice recognition not supported'
            );
        }
    }
    
    // ÊåâÂàÜÁ±ªÁ≠õÈÄâ
    filterByCategory(category) {
        this.filters.cuisine_type = category;
        const filtered = this.restaurants.filter(restaurant => 
            restaurant.cuisine_type === category && restaurant.city === this.currentCity
        );
        this.renderFilteredRestaurants(filtered);
    }
    
    // Âä†ËΩΩÊõ¥Â§öÈ§êÂéÖ
    loadMoreRestaurants() {
        this.showNotification(
            this.currentLanguage === 'fr' ? 'Chargement de plus de restaurants...' : 'Loading more restaurants...'
        );
        
        // Ê®°ÊãüÂä†ËΩΩÂª∂Ëøü
        setTimeout(() => {
            this.showNotification(
                this.currentLanguage === 'fr' ? 'Tous les restaurants charg√©s!' : 'All restaurants loaded!'
            );
        }, 1500);
    }
    
    // ÊòæÁ§∫Â§©Ê∞î‰ø°ÊÅØ
    showWeather() {
        const weatherInfo = {
            'toronto': { temp: '-8¬∞C', condition: 'Snowy', icon: 'fas fa-snowflake' },
            'vancouver': { temp: '4¬∞C', condition: 'Rainy', icon: 'fas fa-cloud-rain' },
            'montreal': { temp: '-12¬∞C', condition: 'Very Cold', icon: 'fas fa-snowflake' },
            'calgary': { temp: '-15¬∞C', condition: 'Snowy', icon: 'fas fa-snowflake' },
            'halifax': { temp: '2¬∞C', condition: 'Cloudy', icon: 'fas fa-cloud' }
        };
        
        const weather = weatherInfo[this.currentCity];
        const message = this.currentLanguage === 'fr' ? 
            `${weather.temp} - ${weather.condition === 'Snowy' ? 'Neigeux' : weather.condition === 'Rainy' ? 'Pluvieux' : weather.condition === 'Very Cold' ? 'Tr√®s Froid' : 'Nuageux'}` :
            `${weather.temp} - ${weather.condition}`;
            
        this.showNotification(`Weather: ${message}`);
    }
}

// ÂÖ®Â±ÄÂáΩÊï∞
function toggleLanguage() {
    app.toggleLanguage();
}

// ÂïÜÂÆ∂ËÆ§ËØÅÂíåÂπøÂëäÁõ∏ÂÖ≥ÂáΩÊï∞
function goToMerchantAuth() {
    window.location.href = 'merchant-login.html';
}

function viewPromotedRestaurant(promotionId) {
    // ËÆ∞ÂΩïÂπøÂëäÁÇπÂáª
    console.log('Promoted restaurant clicked:', promotionId);
    
    // Ê®°ÊãüË∑≥ËΩ¨Âà∞Êé®ÂπøÈ§êÂéÖËØ¶ÊÉÖ
    const promotedRestaurants = {
        'premium-1': {
            id: 'the-keg-steakhouse',
            name: 'The Keg Steakhouse',
            cuisine: 'Premium Canadian Steaks',
            isPromoted: true,
            promotionType: 'premium'
        },
        'standard-1': {
            id: 'cn-tower-360',
            name: 'CN Tower 360 Restaurant',
            cuisine: 'Fine Dining Experience',
            isPromoted: true,
            promotionType: 'standard'
        },
        'standard-2': {
            id: 'schwartz-deli',
            name: 'Schwartz\'s Deli',
            cuisine: 'Authentic Montreal Smoked Meat',
            isPromoted: true,
            promotionType: 'standard'
        }
    };
    
    const restaurant = promotedRestaurants[promotionId];
    if (restaurant) {
        // ËøôÈáåÂèØ‰ª•ÊòæÁ§∫È§êÂéÖËØ¶ÊÉÖÊàñË∑≥ËΩ¨Âà∞È¢ÑËÆ¢È°µÈù¢
        app.showRestaurantDetails(restaurant);
    }
}

function showWinterGuide() {
    // ÊòæÁ§∫ÂÜ¨Â≠£È§êÂéÖÊåáÂçó
    console.log('Winter dining guide requested');
    app.showNotification(
        app.currentLanguage === 'fr' ? 
        'Guide d\'hiver bient√¥t disponible!' : 
        'Winter guide coming soon!',
        'info'
    );
}

function changeCity(city) {
    app.changeCity(city);
}

function handleSearch() {
    const query = document.getElementById('searchInput').value;
    app.handleSearch(query);
}

function startVoiceSearch() {
    app.startVoiceSearch();
}

function showWeather() {
    app.showWeather();
}

function filterByCategory(category) {
    app.filterByCategory(category);
}

function loadMoreRestaurants() {
    app.loadMoreRestaurants();
}

function showFilters() {
    document.getElementById('filtersPanel').classList.add('show');
}

function closeFilters() {
    document.getElementById('filtersPanel').classList.remove('show');
}

function switchTab(tab) {
    // Â∫ïÈÉ®ÂØºËà™ÂàáÊç¢ÈÄªËæë
    console.log(`Switching to ${tab} tab`);
    
    switch(tab) {
        case 'home':
            window.location.href = 'index.html';
            break;
        case 'explore':
            window.location.href = 'explore.html';
            break;
        case 'bookings':
        case 'reservations':
            window.location.href = 'bookings.html';
            break;
        case 'profile':
            window.location.href = 'profile.html';
            break;
        default:
            console.log(`Unknown tab: ${tab}`);
    }
}

// ÂÖ®Â±ÄÂáΩÊï∞Áî®‰∫éHTML onclickË∞ÉÁî®
function quickBook(restaurantId) {
    if (window.app) {
        app.bookRestaurant(restaurantId);
    } else {
        console.error('App not initialized yet');
    }
}

function goToMerchantAuth(action = 'login') {
    if (action === 'login') {
        window.location.href = 'merchant-login.html';
    } else if (action === 'register') {
        window.location.href = 'merchant-register.html';
    } else if (action === 'demo') {
        alert('ÂïÜÂÆ∂ÊºîÁ§∫ÂäüËÉΩÂºÄÂèë‰∏≠...');
    } else {
        window.location.href = 'merchant-login.html';
    }
}

function showMerchantOptions() {
    const dropdown = document.getElementById('merchantOptionsDropdown');
    const isVisible = dropdown.classList.contains('show');
    
    // ÂÖ≥Èó≠ÊâÄÊúâ‰∏ãÊãâËèúÂçï
    closeAllDropdowns();
    
    if (!isVisible) {
        dropdown.classList.add('show');
    }
}

function showUserMenu() {
    console.log('Show user menu');
    // TODO: ÂÆûÁé∞Áî®Êà∑ËèúÂçïÊòæÁ§∫
}

function showNotifications() {
    console.log('Show notifications');
    // TODO: ÂÆûÁé∞ÈÄöÁü•Èù¢ÊùøÊòæÁ§∫
}

function showPricingInfo() {
    alert('ÂïÜÂÆ∂ÂÆö‰ª∑‰ø°ÊÅØÔºö\n\nÂü∫Á°ÄÁâà: $49/Êúà\n‰∏ì‰∏öÁâà: $99/Êúà\n‰ºÅ‰∏öÁâà: $199/Êúà\n\nËÅîÁ≥ªÊàë‰ª¨Ëé∑ÂèñËØ¶ÁªÜ‰ø°ÊÅØ!');
}

function showMerchantSupport() {
    alert('ÂïÜÂÆ∂ÊîØÊåÅÔºö\n\nÁîµËØù: 1-800-MAPLE-TABLE\nÈÇÆÁÆ±: merchants@mapletable.ca\nÂú®Á∫øÂÆ¢Êúç: 24/7 ÂèØÁî®');
}

// Êñ∞ÁöÑUI‰∫§‰∫íÂáΩÊï∞
function goToCustomerLogin() {
    console.log('üîÑ Ê≠£Âú®Ë∑≥ËΩ¨Âà∞È°æÂÆ¢ÁôªÂΩïÈ°µÈù¢...');
    window.location.href = 'customer-login.html';
}

function goToMerchantLogin() {
    console.log('üîÑ Ê≠£Âú®Ë∑≥ËΩ¨Âà∞ÂïÜÂÆ∂ÁôªÂΩïÈ°µÈù¢...');
    window.location.href = 'merchant-login.html';
}

function showCustomerLogin() {
    const dropdown = document.getElementById('customerLoginDropdown');
    const isVisible = dropdown.classList.contains('show');
    
    // ÂÖ≥Èó≠ÊâÄÊúâ‰∏ãÊãâËèúÂçï
    closeAllDropdowns();
    
    if (!isVisible) {
        dropdown.classList.add('show');
    }
}

function showUserMenu() {
    const dropdown = document.getElementById('userMenuDropdown');
    const isVisible = dropdown.classList.contains('show');
    
    // ÂÖ≥Èó≠ÊâÄÊúâ‰∏ãÊãâËèúÂçï
    closeAllDropdowns();
    
    if (!isVisible) {
        dropdown.classList.add('show');
    }
}

function showLocationSelector() {
    // ÂàõÂª∫‰ΩçÁΩÆÈÄâÊã©Âô®Ê®°ÊÄÅÊ°Ü
    const modal = document.createElement('div');
    modal.className = 'location-modal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        backdrop-filter: blur(10px);
    `;
    
    const content = document.createElement('div');
    content.style.cssText = `
        background: white;
        border-radius: 20px;
        padding: 24px;
        max-width: 400px;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
    `;
    
    content.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
            <h3 style="margin: 0; color: var(--dark-text);">ÈÄâÊã©‰ΩçÁΩÆ / Choose Location</h3>
            <button onclick="closeLocationModal()" style="background: #f1f5f9; border: none; border-radius: 50%; width: 32px; height: 32px; cursor: pointer;">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <button onclick="getCurrentLocation()" style="
            width: 100%;
            background: linear-gradient(45deg, var(--canadian-red), #dc2626);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 12px 16px;
            font-weight: 600;
            cursor: pointer;
            margin-bottom: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        ">
            <i class="fas fa-location-arrow"></i>
            ‰ΩøÁî®ÂΩìÂâç‰ΩçÁΩÆ / Use Current Location
        </button>
        
        <div style="margin-bottom: 16px;">
            <h4 style="margin: 0 0 12px 0; color: var(--medium-text); font-size: 0.9rem;">ÁÉ≠Èó®ÂüéÂ∏Ç / Popular Cities</h4>
            <div class="cities-grid" style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px;">
                ${getCitiesHTML()}
            </div>
        </div>
    `;
    
    modal.appendChild(content);
    document.body.appendChild(modal);
    
    // ÁÇπÂáªËÉåÊôØÂÖ≥Èó≠
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeLocationModal();
        }
    });
}

function getCitiesHTML() {
    const cities = [
        { value: 'toronto', name: 'Toronto, ON', nameF: 'Toronto, ON' },
        { value: 'vancouver', name: 'Vancouver, BC', nameF: 'Vancouver, BC' },
        { value: 'montreal', name: 'Montr√©al, QC', nameF: 'Montr√©al, QC' },
        { value: 'calgary', name: 'Calgary, AB', nameF: 'Calgary, AB' },
        { value: 'ottawa', name: 'Ottawa, ON', nameF: 'Ottawa, ON' },
        { value: 'edmonton', name: 'Edmonton, AB', nameF: 'Edmonton, AB' },
        { value: 'winnipeg', name: 'Winnipeg, MB', nameF: 'Winnipeg, MB' },
        { value: 'quebec', name: 'Qu√©bec City, QC', nameF: 'Ville de Qu√©bec, QC' },
        { value: 'halifax', name: 'Halifax, NS', nameF: 'Halifax, NS' }
    ];
    
    return cities.map(city => `
        <button onclick="selectCity('${city.value}', '${city.name}')" style="
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 12px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: left;
        " onmouseover="this.style.borderColor='var(--canadian-red)'; this.style.background='rgba(255,0,0,0.05)'" 
           onmouseout="this.style.borderColor='#e2e8f0'; this.style.background='white'">
            ${city.name}
        </button>
    `).join('');
}

// Âú∞ÁêÜÂÆö‰ΩçÂäüËÉΩ
function getCurrentLocation() {
    if (!navigator.geolocation) {
        alert('ÊÇ®ÁöÑÊµèËßàÂô®‰∏çÊîØÊåÅÂú∞ÁêÜÂÆö‰ΩçÂäüËÉΩ / Geolocation is not supported by your browser');
        return;
    }
    
    // ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
    const button = event.target;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Ê≠£Âú®ÂÆö‰Ωç... / Locating...';
    button.disabled = true;
    
    navigator.geolocation.getCurrentPosition(
        async (position) => {
            const { latitude, longitude } = position.coords;
            console.log('Áî®Êà∑‰ΩçÁΩÆ:', latitude, longitude);
            
            try {
                // ‰ΩøÁî®ÂèçÂêëÂú∞ÁêÜÁºñÁ†ÅËé∑ÂèñÂüéÂ∏Ç‰ø°ÊÅØ
                const cityName = await reverseGeocode(latitude, longitude);
                document.getElementById('currentLocation').textContent = cityName;
                
                if (app) {
                    app.currentCity = cityName.toLowerCase().split(',')[0];
                    app.loadRestaurants();
                }
                
                closeLocationModal();
                showNotification(`‰ΩçÁΩÆÂ∑≤Êõ¥Êñ∞‰∏∫: ${cityName} / Location updated to: ${cityName}`);
                
            } catch (error) {
                console.error('ÂèçÂêëÂú∞ÁêÜÁºñÁ†ÅÂ§±Ë¥•:', error);
                alert('Êó†Ê≥ïËé∑Âèñ‰ΩçÁΩÆ‰ø°ÊÅØÔºåËØ∑ÊâãÂä®ÈÄâÊã©ÂüéÂ∏Ç / Unable to get location info, please select city manually');
            }
            
            button.innerHTML = '<i class="fas fa-location-arrow"></i> ‰ΩøÁî®ÂΩìÂâç‰ΩçÁΩÆ / Use Current Location';
            button.disabled = false;
        },
        (error) => {
            console.error('Âú∞ÁêÜÂÆö‰ΩçÂ§±Ë¥•:', error);
            let message = 'ÂÆö‰ΩçÂ§±Ë¥• / Location failed: ';
            
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    message += 'Áî®Êà∑ÊãíÁªù‰∫ÜÂÆö‰ΩçËØ∑Ê±Ç / User denied location request';
                    break;
                case error.POSITION_UNAVAILABLE:
                    message += '‰ΩçÁΩÆ‰ø°ÊÅØ‰∏çÂèØÁî® / Location unavailable';
                    break;
                case error.TIMEOUT:
                    message += 'ÂÆö‰ΩçËØ∑Ê±ÇË∂ÖÊó∂ / Location request timeout';
                    break;
                default:
                    message += 'Êú™Áü•ÈîôËØØ / Unknown error';
                    break;
            }
            
            alert(message);
            button.innerHTML = '<i class="fas fa-location-arrow"></i> ‰ΩøÁî®ÂΩìÂâç‰ΩçÁΩÆ / Use Current Location';
            button.disabled = false;
        },
        {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 60000
        }
    );
}

// ÂèçÂêëÂú∞ÁêÜÁºñÁ†Å - Â∞ÜÂùêÊ†áËΩ¨Êç¢‰∏∫ÂüéÂ∏ÇÂêçÁß∞
async function reverseGeocode(latitude, longitude) {
    // ‰ΩøÁî®Âä†ÊãøÂ§ßÂüéÂ∏ÇÊï∞ÊçÆÂ∫ìËøõË°åÂåπÈÖç
    const canadianCities = [
        { name: 'Toronto, ON', lat: 43.6532, lon: -79.3832, radius: 50 },
        { name: 'Vancouver, BC', lat: 49.2827, lon: -123.1207, radius: 50 },
        { name: 'Montr√©al, QC', lat: 45.5017, lon: -73.5673, radius: 50 },
        { name: 'Calgary, AB', lat: 51.0447, lon: -114.0719, radius: 50 },
        { name: 'Ottawa, ON', lat: 45.4215, lon: -75.6972, radius: 50 },
        { name: 'Edmonton, AB', lat: 53.5461, lon: -113.4938, radius: 50 },
        { name: 'Winnipeg, MB', lat: 49.8951, lon: -97.1384, radius: 50 },
        { name: 'Qu√©bec City, QC', lat: 46.8139, lon: -71.2080, radius: 50 },
        { name: 'Halifax, NS', lat: 44.6488, lon: -63.5752, radius: 50 }
    ];
    
    // ËÆ°ÁÆóË∑ùÁ¶ªÂπ∂ÊâæÂà∞ÊúÄËøëÁöÑÂüéÂ∏Ç
    let nearestCity = null;
    let minDistance = Infinity;
    
    canadianCities.forEach(city => {
        const distance = calculateDistance(latitude, longitude, city.lat, city.lon);
        if (distance < city.radius && distance < minDistance) {
            minDistance = distance;
            nearestCity = city;
        }
    });
    
    return nearestCity ? nearestCity.name : 'Toronto, ON'; // ÈªòËÆ§Toronto
}

// ËÆ°ÁÆó‰∏§ÁÇπÈó¥Ë∑ùÁ¶ªÔºàÂÖ¨ÈáåÔºâ
function calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 6371; // Âú∞ÁêÉÂçäÂæÑÔºàÂÖ¨ÈáåÔºâ
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
              Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
}

// ÈÄâÊã©ÂüéÂ∏Ç
function selectCity(cityValue, cityName) {
    document.getElementById('currentLocation').textContent = cityName;
    if (app) {
        app.changeCity(cityValue);
    }
    closeLocationModal();
    showNotification(`ÂüéÂ∏ÇÂ∑≤ÂàáÊç¢Âà∞: ${cityName} / City switched to: ${cityName}`);
}

// ÂÖ≥Èó≠‰ΩçÁΩÆÈÄâÊã©Ê®°ÊÄÅÊ°Ü
function closeLocationModal() {
    const modal = document.querySelector('.location-modal');
    if (modal) {
        document.body.removeChild(modal);
    }
}

// ÊòæÁ§∫ÈÄöÁü•
function showNotification(message) {
    // ÂàõÂª∫ÈÄöÁü•ÂÖÉÁ¥†
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: var(--canadian-red);
        color: white;
        padding: 12px 20px;
        border-radius: 12px;
        font-weight: 600;
        z-index: 10001;
        transform: translateX(100%);
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    `;
    notification.textContent = message;

    document.body.appendChild(notification);

    // ÊòæÁ§∫Âä®Áîª
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);

    // Ëá™Âä®ÈöêËóè
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (document.body.contains(notification)) {
                document.body.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

function showCustomerAuth(type) {
    closeAllDropdowns();
    
    if (type === 'login') {
        window.location.href = 'customer-login.html';
    } else if (type === 'register') {
        window.location.href = 'customer-register.html';
    }
}

function continueAsGuest() {
    closeAllDropdowns();
    alert('ÁªßÁª≠‰Ωú‰∏∫ËÆøÂÆ¢ÊµèËßà MapleTable');
}

function loginWithGoogle() {
    closeAllDropdowns();
    alert('Google ÁôªÂΩïÂäüËÉΩÂºÄÂèë‰∏≠...');
}

function loginWithFacebook() {
    closeAllDropdowns();
    alert('Facebook ÁôªÂΩïÂäüËÉΩÂºÄÂèë‰∏≠...');
}

function loginUser(userData) {
    // Êõ¥Êñ∞UI‰ª•ÊòæÁ§∫Â∑≤ÁôªÂΩïÁä∂ÊÄÅ
    document.getElementById('customerLoginBtn').style.display = 'none';
    document.getElementById('userProfileSection').style.display = 'block';
    document.getElementById('userName').textContent = userData.name.split(' ')[0] + ' ' + userData.name.split(' ')[1][0] + '.';
    document.getElementById('userDisplayName').textContent = userData.name;
    document.getElementById('userEmail').textContent = userData.email;
    
    // Êõ¥Êñ∞Â§¥ÂÉè
    const avatars = document.querySelectorAll('.user-avatar, .user-avatar-large');
    avatars.forEach(avatar => {
        avatar.src = userData.avatar;
    });
    
    console.log('Áî®Êà∑Â∑≤ÁôªÂΩï:', userData);
}

function logout() {
    closeAllDropdowns();
    
    // ÊÅ¢Â§çÊú™ÁôªÂΩïÁä∂ÊÄÅ
    document.getElementById('customerLoginBtn').style.display = 'flex';
    document.getElementById('userProfileSection').style.display = 'none';
    
    alert('ÊÇ®Â∑≤ÊàêÂäüÁôªÂá∫');
}

function showFavorites() {
    closeAllDropdowns();
    window.location.href = '#favorites';
    console.log('ÊòæÁ§∫Êî∂ËóèÂ§π');
}

function showReviews() {
    closeAllDropdowns();
    alert('ÊàëÁöÑËØÑ‰ª∑ÂäüËÉΩÂºÄÂèë‰∏≠...');
}

function showLoyaltyProgram() {
    closeAllDropdowns();
    alert('‰ºöÂëòÂ•ñÂä±ËÆ°ÂàíÔºö\n\nÂΩìÂâçÁßØÂàÜ: 1,250\n‰ºöÂëòÁ≠âÁ∫ß: ÈªÑÈáë\n\nÂèØÂÖëÊç¢Â•ñÂä±:\n- ÂÖçË¥πÁîúÁÇπ (500ÁßØÂàÜ)\n- 10%ÊäòÊâ£ (1000ÁßØÂàÜ)\n- ÂÖçË¥π‰∏ªËèú (2000ÁßØÂàÜ)');
}

function showUserSettings() {
    closeAllDropdowns();
    alert('Ë¥¶Êà∑ËÆæÁΩÆÂäüËÉΩÂºÄÂèë‰∏≠...');
}

function showHelp() {
    closeAllDropdowns();
    alert('Â∏ÆÂä©‰∏éÊîØÊåÅÔºö\n\nÂÆ¢ÊúçÁîµËØù: 1-800-MAPLE-TABLE\nÈÇÆÁÆ±: support@mapletable.ca\nÂú®Á∫øÂÆ¢Êúç: 24/7 ÂèØÁî®\n\nÂ∏∏ËßÅÈóÆÈ¢òËß£Á≠îËØ∑ËÆøÈóÆÊàë‰ª¨ÁöÑÁΩëÁ´ô');
}

function quickBook() {
    window.location.href = 'booking.html';
}

function closeAllDropdowns() {
    document.querySelectorAll('.dropdown-menu').forEach(dropdown => {
        dropdown.classList.remove('show');
    });
}

// ÁÇπÂáªÂ§ñÈÉ®ÂÖ≥Èó≠‰∏ãÊãâËèúÂçï
document.addEventListener('click', (event) => {
    if (!event.target.closest('.dropdown-menu') && 
        !event.target.closest('.action-btn') && 
        !event.target.closest('.user-profile-btn') &&
        !event.target.closest('.location-indicator')) {
        closeAllDropdowns();
    }
});

// üöÄ ÂèëÊï£ÊÄßÊÄùÁª¥ÂàõÊñ∞ÂäüËÉΩÈõÜÂêà
class InnovativeFeatures {
    constructor() {
        this.features = {
            aiWeatherDining: true,
            socialDining: true,
            voiceBooking: true,
            moodBasedRecommendation: true,
            realTimeGroupBooking: true,
            culturalFoodJourney: true,
            sustainableDining: true,
            vipConciergeAI: true
        };
        this.init();
    }

    init() {
        console.log('üé® ÂèëÊï£ÊÄßÊÄùÁª¥ÂàõÊñ∞ÂäüËÉΩÂ∑≤ÊøÄÊ¥ª');
        this.initWeatherBasedDining();
        this.initSocialDiningFeatures();
        this.initVoiceBookingSystem();
        this.initMoodRecommendations();
        this.initGroupBookingSystem();
        this.initCulturalJourney();
        this.initSustainableDining();
        this.initVIPConcierge();
    }

    // 1. AIÂ§©Ê∞îÊô∫ËÉΩÁî®È§êÊé®Ëçê
    initWeatherBasedDining() {
        const weatherDiningBtn = document.createElement('button');
        weatherDiningBtn.className = 'innovative-feature-btn weather-dining';
        weatherDiningBtn.innerHTML = `
            <i class="fas fa-cloud-sun"></i>
            <span>Â§©Ê∞îÊé®Ëçê</span>
        `;
        weatherDiningBtn.onclick = () => this.showWeatherBasedRecommendations();
        
        // Ê∑ªÂä†Âà∞‰∏ªÁïåÈù¢
        this.addFeatureButton(weatherDiningBtn);
    }

    // 2. Á§æ‰∫§Áî®È§êÂäüËÉΩ
    initSocialDiningFeatures() {
        const socialBtn = document.createElement('button');
        socialBtn.className = 'innovative-feature-btn social-dining';
        socialBtn.innerHTML = `
            <i class="fas fa-users"></i>
            <span>Á§æ‰∫§Áî®È§ê</span>
        `;
        socialBtn.onclick = () => this.showSocialDiningOptions();
        
        this.addFeatureButton(socialBtn);
    }

    // 3. ËØ≠Èü≥È¢ÑËÆ¢Á≥ªÁªü
    initVoiceBookingSystem() {
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const voiceBtn = document.createElement('button');
            voiceBtn.className = 'innovative-feature-btn voice-booking';
            voiceBtn.innerHTML = `
                <i class="fas fa-microphone"></i>
                <span>ËØ≠Èü≥È¢ÑËÆ¢</span>
            `;
            voiceBtn.onclick = () => this.startVoiceBooking();
            
            this.addFeatureButton(voiceBtn);
        }
    }

    // 4. ÊÉÖÁª™ÂåñÊé®ËçêÁ≥ªÁªü
    initMoodRecommendations() {
        const moodBtn = document.createElement('button');
        moodBtn.className = 'innovative-feature-btn mood-recommend';
        moodBtn.innerHTML = `
            <i class="fas fa-heart"></i>
            <span>ÂøÉÊÉÖÊé®Ëçê</span>
        `;
        moodBtn.onclick = () => this.showMoodBasedRecommendations();
        
        this.addFeatureButton(moodBtn);
    }

    // 5. ÂÆûÊó∂Áæ§ÁªÑÈ¢ÑËÆ¢
    initGroupBookingSystem() {
        const groupBtn = document.createElement('button');
        groupBtn.className = 'innovative-feature-btn group-booking';
        groupBtn.innerHTML = `
            <i class="fas fa-user-friends"></i>
            <span>Áæ§ÁªÑÈ¢ÑËÆ¢</span>
        `;
        groupBtn.onclick = () => this.showGroupBookingSystem();
        
        this.addFeatureButton(groupBtn);
    }

    // 6. ÊñáÂåñÁæéÈ£ü‰πãÊóÖ
    initCulturalJourney() {
        const cultureBtn = document.createElement('button');
        cultureBtn.className = 'innovative-feature-btn cultural-journey';
        cultureBtn.innerHTML = `
            <i class="fas fa-globe-americas"></i>
            <span>ÊñáÂåñ‰πãÊóÖ</span>
        `;
        cultureBtn.onclick = () => this.showCulturalFoodJourney();
        
        this.addFeatureButton(cultureBtn);
    }

    // 7. ÂèØÊåÅÁª≠Áî®È§ê
    initSustainableDining() {
        const sustainableBtn = document.createElement('button');
        sustainableBtn.className = 'innovative-feature-btn sustainable-dining';
        sustainableBtn.innerHTML = `
            <i class="fas fa-leaf"></i>
            <span>ÁªøËâ≤Áî®È§ê</span>
        `;
        sustainableBtn.onclick = () => this.showSustainableDining();
        
        this.addFeatureButton(sustainableBtn);
    }

    // 8. VIP AIÁ§ºÂÆæÊúçÂä°
    initVIPConcierge() {
        const vipBtn = document.createElement('button');
        vipBtn.className = 'innovative-feature-btn vip-concierge';
        vipBtn.innerHTML = `
            <i class="fas fa-crown"></i>
            <span>AIÁ§ºÂÆæ</span>
        `;
        vipBtn.onclick = () => this.showVIPConciergeService();
        
        this.addFeatureButton(vipBtn);
    }

    // Ê∑ªÂä†ÂäüËÉΩÊåâÈíÆÂà∞ÁïåÈù¢
    addFeatureButton(button) {
        let container = document.getElementById('innovativeFeatures');
        if (!container) {
            container = document.createElement('div');
            container.id = 'innovativeFeatures';
            container.className = 'innovative-features-container';
            container.style.cssText = `
                position: fixed;
                right: 20px;
                top: 50%;
                transform: translateY(-50%);
                display: flex;
                flex-direction: column;
                gap: 8px;
                z-index: 999;
            `;
            document.body.appendChild(container);
        }
        
        // ËÆæÁΩÆÊåâÈíÆÊ†∑Âºè
        button.style.cssText = `
            width: 60px;
            height: 60px;
            border-radius: 50%;
            border: none;
            background: linear-gradient(45deg, var(--canadian-red), #dc2626);
            color: white;
            cursor: pointer;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(255, 0, 0, 0.3);
        `;
        
        button.addEventListener('mouseenter', () => {
            button.style.transform = 'scale(1.1)';
            button.style.boxShadow = '0 6px 20px rgba(255, 0, 0, 0.4)';
        });
        
        button.addEventListener('mouseleave', () => {
            button.style.transform = 'scale(1)';
            button.style.boxShadow = '0 4px 12px rgba(255, 0, 0, 0.3)';
        });
        
        container.appendChild(button);
    }

    // ÂäüËÉΩÂÆûÁé∞ÊñπÊ≥ï
    showWeatherBasedRecommendations() {
        const weatherRecommendations = {
            cold: ['ÁÉ≠Ê±§Èù¢', 'ÁÅ´ÈîÖ', 'ÁÉ§ËÇâ', 'ÊöñË∫´Ê±§ÂìÅ', 'ÁÉ≠È•ÆÂíñÂï°ÂéÖ'],
            warm: ['Ê∏ÖÁàΩÊ≤ôÊãâ', 'Êµ∑È≤ú', 'Êó•Êñô', 'ÊÑèÂºèËΩªÈ£ü', 'Èú≤Âè∞È§êÂéÖ'],
            rainy: ['ÂÆ§ÂÜÖËàíÈÄÇÈ§êÂéÖ', 'ÂíñÂï°ÂéÖ', '‰π¶Â∫óÈ§êÂéÖ', 'Ê∏©È¶®Â∞èÈ¶Ü', '‰∏ãÂçàËå∂'],
            snowy: ['Êû´Á≥ñÂ∞èÂ±ã', 'Ê∏©ÊöñÂ£ÅÁÇâÈ§êÂéÖ', 'Âä†ÊãøÂ§ß‰º†ÁªüËèú', 'ÁÉ≠Â∑ßÂÖãÂäõÂ±ã', 'ÂÜ¨Â≠£ÁâπËâ≤Ëèú']
        };

        const currentWeather = 'snowy'; // Ê®°ÊãüÂΩìÂâçÂ§©Ê∞î
        const recommendations = weatherRecommendations[currentWeather];
        
        alert(`üå®Ô∏è Ê†πÊçÆÂΩìÂâçÈõ™Â§©Â§©Ê∞îÔºåAI‰∏∫ÊÇ®Êé®ËçêÔºö\n\n${recommendations.map(r => '‚Ä¢ ' + r).join('\n')}\n\nËøô‰∫õÈ§êÂéÖÂ∞Ü‰∏∫ÊÇ®Êèê‰æõÊ∏©ÊöñËàíÈÄÇÁöÑÁî®È§ê‰ΩìÈ™åÔºÅ`);
    }

    showSocialDiningOptions() {
        alert(`üë• Á§æ‰∫§Áî®È§êÂäüËÉΩÔºö\n\n‚Ä¢ ÂØªÊâæÁî®È§ê‰ºô‰º¥\n‚Ä¢ Âä†ÂÖ•Á§æÂå∫È§êÊ°å\n‚Ä¢ ÂàÜ‰∫´Áî®È§ê‰ΩìÈ™å\n‚Ä¢ È§êÂéÖÁ§æ‰∫§Ê¥ªÂä®\n‚Ä¢ ÁæéÈ£üÁà±Â•ΩËÄÖËÅö‰ºö\n\nËÆ©Áî®È§êÊàê‰∏∫Á§æ‰∫§ÁöÑÊ°•Ê¢ÅÔºÅ`);
    }

    startVoiceBooking() {
        alert(`üé§ ËØ≠Èü≥È¢ÑËÆ¢Á≥ªÁªüÔºö\n\nËØ∑ËØ¥Ôºö"ÊàëÊÉ≥È¢ÑËÆ¢‰ªäÊôö7ÁÇπÔºå4‰∏™‰∫∫ÁöÑÊ°åÂ≠ê"\n\nÁ≥ªÁªüÂ∞ÜÊô∫ËÉΩËØÜÂà´ÊÇ®ÁöÑÈúÄÊ±ÇÂπ∂‰∏∫ÊÇ®Êé®ËçêÊúÄÂêàÈÄÇÁöÑÈ§êÂéÖÂíåÊó∂Èó¥ÔºÅ\n\nÔºàÊ≠§ÂäüËÉΩÈúÄË¶ÅÈ∫¶ÂÖãÈ£éÊùÉÈôêÔºâ`);
    }

    showMoodBasedRecommendations() {
        const moods = {
            'Êµ™Êº´': ['ÁÉõÂÖâÊôöÈ§ê', 'ÊôØËßÇÈ§êÂéÖ', 'ÁßÅÂØÜÂåÖÈó¥', 'Ê≥ïÂºèÊñôÁêÜ', 'ÈÖíÂ∫ÑÈ§êÂéÖ'],
            'Â∫ÜÁ•ù': ['È´òÊ°£È§êÂéÖ', 'È¶ôÊßüÈÖíÂêß', 'ÁâπËâ≤ÁîúÂìÅ', 'Âõ¢‰ΩìÂåÖÈó¥', 'ËäÇÊó•ÁâπËâ≤Ëèú'],
            'ÊîæÊùæ': ['ÂíñÂï°ÂéÖ', 'Ëä±Âõ≠È§êÂéÖ', 'Á¥†È£üÈ§êÂéÖ', 'Ëå∂ÂÆ§', 'ÈùôË∞ßÂ∞èÈ¶Ü'],
            'ÂïÜÂä°': ['ÂÆâÈùôÁéØÂ¢É', 'WiFiÁïÖÈÄö', 'ÂïÜÂä°Â•óÈ§ê', 'Âø´ÈÄüÊúçÂä°', '‰ºöËÆÆÂåÖÈó¥']
        };

        const selectedMood = prompt('ËØ∑ÈÄâÊã©ÊÇ®ÁöÑÂøÉÊÉÖÔºö\n\n1. Êµ™Êº´\n2. Â∫ÜÁ•ù\n3. ÊîæÊùæ\n4. ÂïÜÂä°\n\nËØ∑ËæìÂÖ•Êï∞Â≠óÔºö');
        const moodNames = ['Êµ™Êº´', 'Â∫ÜÁ•ù', 'ÊîæÊùæ', 'ÂïÜÂä°'];
        
        if (selectedMood && selectedMood >= 1 && selectedMood <= 4) {
            const mood = moodNames[selectedMood - 1];
            const recommendations = moods[mood];
            alert(`‚ù§Ô∏è Âü∫‰∫éÊÇ®ÁöÑ"${mood}"ÂøÉÊÉÖÔºåÊé®ËçêÔºö\n\n${recommendations.map(r => '‚Ä¢ ' + r).join('\n')}\n\nÊÑøÊÇ®Áî®È§êÊÑâÂø´ÔºÅ`);
        }
    }

    showGroupBookingSystem() {
        alert(`üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ÂÆûÊó∂Áæ§ÁªÑÈ¢ÑËÆ¢Ôºö\n\n‚Ä¢ ÂàõÂª∫Áæ§ÁªÑÈ¢ÑËÆ¢\n‚Ä¢ ÈÇÄËØ∑ÊúãÂèãÂä†ÂÖ•\n‚Ä¢ ÂÆûÊó∂ÊäïÁ•®ÈÄâÈ§êÂéÖ\n‚Ä¢ AAÂà∂Ëá™Âä®ÂàÜË¥¶\n‚Ä¢ Áæ§ÁªÑ‰∏ìÂ±û‰ºòÊÉ†\n‚Ä¢ Áªü‰∏ÄÊó∂Èó¥ÂçèË∞É\n\nËÆ©ËÅöÈ§êÁªÑÁªáÊõ¥ÁÆÄÂçïÔºÅ`);
    }

    showCulturalFoodJourney() {
        const culturalJourneys = [
            'üá®üá¶ Âä†ÊãøÂ§ß‰º†ÁªüÁæéÈ£ü‰πãÊóÖ',
            'üá´üá∑ È≠ÅÂåóÂÖãÊ≥ïÂºèÊñôÁêÜ',
            'ü¶û Êµ∑Ê¥ã‰∏âÁúÅÊµ∑È≤úÁõõÂÆ¥',
            'ü•û Êû´Á≥ñÊµÜÁæéÈ£ü‰ΩìÈ™å',
            'üèîÔ∏è Ê¥õÂü∫Â±±ËÑâÈáéÂë≥ÊñôÁêÜ',
            'üåæ ËçâÂéüÁúÅÂÜúÂú∫ËèúÂìÅ',
            'üêü Âéü‰ΩèÊ∞ë‰º†ÁªüÈ£üÁâ©',
            'üç∫ Âä†ÊãøÂ§ßÁ≤æÈÖøÂï§ÈÖíÈÖçÈ§ê'
        ];

        alert(`üåç Âä†ÊãøÂ§ßÊñáÂåñÁæéÈ£ü‰πãÊóÖÔºö\n\n${culturalJourneys.join('\n')}\n\nÊØè‰∏™‰∏ªÈ¢òÈÉΩÊúâ‰∏ìÈó®ÁöÑÈ§êÂéÖÊé®ËçêÂíåÊñáÂåñËÉåÊôØ‰ªãÁªçÔºåÂ∏¶ÊÇ®Ê∑±Â∫¶‰ΩìÈ™åÂä†ÊãøÂ§ßÂ§öÂÖÉÈ•ÆÈ£üÊñáÂåñÔºÅ`);
    }

    showSustainableDining() {
        alert(`üå± ÁªøËâ≤ÂèØÊåÅÁª≠Áî®È§êÔºö\n\n‚Ä¢ Êú¨Âú∞È£üÊùêÈ§êÂéÖ\n‚Ä¢ ÊúâÊú∫ËÆ§ËØÅÈ§êÂéÖ\n‚Ä¢ Èõ∂Êµ™Ë¥πÈ§êÂéÖ\n‚Ä¢ Á¥†È£üÂèãÂ•ΩÈ§êÂéÖ\n‚Ä¢ ÁéØ‰øùÂåÖË£ÖÈ§êÂéÖ\n‚Ä¢ ÂèØÊåÅÁª≠Êµ∑È≤ú\n‚Ä¢ ÂÜúÂú∫Áõ¥‰æõÈ§êÊ°å\n\n‰∏∫Âú∞ÁêÉÂíåÂÅ•Â∫∑ÂÅöÂá∫ÁæéÂë≥ÈÄâÊã©ÔºÅ`);
    }

    showVIPConciergeService() {
        alert(`üëë VIP AIÁ§ºÂÆæÊúçÂä°Ôºö\n\n‚Ä¢ ‰∏™‰∫∫‰∏ìÂ±ûÈ§êÂéÖÈ°æÈóÆ\n‚Ä¢ 24/7Êô∫ËÉΩÂÆ¢Êúç\n‚Ä¢ ‰ºòÂÖàÈ¢ÑËÆ¢ÊùÉÈôê\n‚Ä¢ ÂÆöÂà∂ÂåñÁî®È§ê‰ΩìÈ™å\n‚Ä¢ ÁîüÊó•Á∫™ÂøµÊó•ÊèêÈÜí\n‚Ä¢ ‰∏ìÂ±û‰ºòÊÉ†ÂíåÊäòÊâ£\n‚Ä¢ Á±≥ÂÖ∂ÊûóÈ§êÂéÖÁªøËâ≤ÈÄöÈÅì\n‚Ä¢ ÁßÅ‰∫∫Âé®Â∏àÊé®Ëçê\n\nËÆ©ÊØè‰∏ÄÊ¨°Áî®È§êÈÉΩÊàê‰∏∫‰∏ìÂ±û‰ΩìÈ™åÔºÅ`);
    }
}

// ÂàùÂßãÂåñÂ∫îÁî®
let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new MapleTableApp();
    window.app = app; // ‰Ωø app Âú®ÂÖ®Â±ÄÂèØÁî®
    console.log('üçÅ MapleTable App loaded and ready!');
    
    // ÂàùÂßãÂåñÂàõÊñ∞ÂäüËÉΩ
    setTimeout(() => {
        const innovativeFeatures = new InnovativeFeatures();
        window.innovativeFeatures = innovativeFeatures;
    }, 2000); // Âª∂Ëøü2ÁßíÁ°Æ‰øùÈ°µÈù¢ÂÆåÂÖ®Âä†ËΩΩ
    
    // Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
    checkAndUpdateLoginStatus();
});

// Ê£ÄÊü•Âπ∂Êõ¥Êñ∞ÁôªÂΩïÁä∂ÊÄÅ
function checkAndUpdateLoginStatus() {
    const isLoggedIn = localStorage.getItem('isLoggedIn');
    const userType = localStorage.getItem('userType');
    const currentUser = localStorage.getItem('currentUser');
    const currentMerchant = localStorage.getItem('currentMerchant');
    
    if (isLoggedIn === 'true') {
        if (userType === 'customer' && currentUser) {
            const userData = JSON.parse(currentUser);
            loginUser(userData);
        } else if (userType === 'merchant' && currentMerchant) {
            const merchantData = JSON.parse(currentMerchant);
            loginMerchant(merchantData);
        }
    }
}

// ÂïÜÂÆ∂ÁôªÂΩïÁä∂ÊÄÅÊõ¥Êñ∞
function loginMerchant(merchantData) {
    // ÈöêËóèÈ°æÂÆ¢ÁôªÂΩïÊåâÈíÆ
    const customerLoginBtn = document.getElementById('customerLoginBtn');
    if (customerLoginBtn) {
        customerLoginBtn.style.display = 'none';
    }
    
    // Êõ¥Êñ∞ÂïÜÂÆ∂ÊåâÈíÆ‰∏∫Â∑≤ÁôªÂΩïÁä∂ÊÄÅ
    const merchantBtn = document.querySelector('.merchant-btn');
    if (merchantBtn) {
        merchantBtn.innerHTML = `
            <i class="fas fa-store"></i>
            <span data-en="My Restaurant" data-fr="Mon Restaurant">My Restaurant</span>
        `;
        merchantBtn.onclick = () => goToMerchantDashboard();
        merchantBtn.style.background = 'linear-gradient(135deg, #10b981 0%, #047857 100%)';
        merchantBtn.title = 'Access your restaurant dashboard';
    }
    
    // Âú®È°∂ÈÉ®Â∑•ÂÖ∑Ê†èÊ∑ªÂä†ÂïÜÂÆ∂ÁÆ°ÁêÜÂø´Êç∑ÂÖ•Âè£
    addMerchantQuickAccess(merchantData);
    
    console.log('ÂïÜÂÆ∂Â∑≤ÁôªÂΩï:', merchantData);
}

// Ê∑ªÂä†ÂïÜÂÆ∂Âø´Êç∑ÁÆ°ÁêÜÂÖ•Âè£ - ÂÆåÂÖ®Áã¨Á´ãÁöÑÂå∫Âüü
function addMerchantQuickAccess(merchantData) {
    // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÊúâÂïÜÂÆ∂ÁÆ°ÁêÜÂÖ•Âè£
    if (document.getElementById('merchantQuickAccess')) {
        return;
    }

    // ÈöêËóèÂïÜÂÆ∂ÁôªÂΩïÊåâÈíÆÔºåÂõ†‰∏∫Â∑≤ÁªèÁôªÂΩï‰∫Ü
    const merchantBtn = document.querySelector('.merchant-btn');
    if (merchantBtn) {
        merchantBtn.style.display = 'none';
    }

    // ÂàõÂª∫ÂïÜÂÆ∂ÁÆ°ÁêÜÊ®™ÂπÖ - Âú®È°∂ÈÉ®Â∑•ÂÖ∑Ê†è‰∏ãÊñπ
    const merchantBanner = document.createElement('div');
    merchantBanner.id = 'merchantQuickAccess';
    merchantBanner.className = 'merchant-banner';
    merchantBanner.innerHTML = `
        <div class="merchant-banner-content">
            <div class="merchant-info">
                <div class="merchant-avatar">
                    <i class="fas fa-store"></i>
                </div>
                <div class="merchant-details">
                    <h3>${merchantData.restaurantName || merchantData.restaurant?.name || 'ÊàëÁöÑÈ§êÂéÖ'}</h3>
                    <p>È§êÂéÖID: ${merchantData.restaurant?.id || 'rest_001'} ‚Ä¢ <span class="status-online">Ëê•‰∏ö‰∏≠</span></p>
                </div>
            </div>
            <div class="merchant-actions">
                <button class="merchant-dashboard-btn" onclick="goToMerchantDashboard()" title="ÂïÜÂÆ∂ÁÆ°ÁêÜÂêéÂè∞">
                    <i class="fas fa-tachometer-alt"></i>
                    <span>ÁÆ°ÁêÜÂêéÂè∞</span>
                </button>
                <button class="merchant-logout-btn" onclick="logoutMerchant()" title="ÈÄÄÂá∫ÁôªÂΩï">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>ÈÄÄÂá∫</span>
                </button>
            </div>
        </div>
    `;
    
    // ÊèíÂÖ•Âà∞‰∏ªÂ∫îÁî®ÂÜÖÂÆπÁöÑÊúÄÈ°∂ÈÉ®
    const mainApp = document.getElementById('mainApp');
    const topToolbar = document.querySelector('.top-toolbar');
    if (mainApp && topToolbar) {
        mainApp.insertBefore(merchantBanner, topToolbar.nextSibling);
    }
}

// ÂïÜÂÆ∂ÈÄÄÂá∫ÁôªÂΩï
function logoutMerchant() {
    if (confirm('Á°ÆËÆ§ÈÄÄÂá∫ÂïÜÂÆ∂ÁôªÂΩïÂêóÔºü')) {
        localStorage.removeItem('merchantLogin');
        
        // ÊòæÁ§∫ÂïÜÂÆ∂ÁôªÂΩïÊåâÈíÆ
        const merchantBtn = document.querySelector('.merchant-btn');
        if (merchantBtn) {
            merchantBtn.style.display = 'flex';
        }
        
        // ÁßªÈô§ÂïÜÂÆ∂Ê®™ÂπÖ
        const merchantBanner = document.getElementById('merchantQuickAccess');
        if (merchantBanner) {
            merchantBanner.remove();
        }
        
        alert('Â∑≤ÈÄÄÂá∫ÂïÜÂÆ∂ÁôªÂΩï');
    }
}

// ÂïÜÂÆ∂ÁÆ°ÁêÜÈ°µÈù¢Ë∑≥ËΩ¨ - Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
function goToMerchantDashboard() {
    // Ê£ÄÊü•ÂïÜÂÆ∂ÊòØÂê¶Â∑≤ÁôªÂΩï
    const merchantLogin = localStorage.getItem('merchantLogin');
    
    if (!merchantLogin) {
        // Êú™ÁôªÂΩïÔºåÊèêÈÜíÁôªÂΩï
        alert('ËØ∑ÂÖàÁôªÂΩïÂïÜÂÆ∂Ë¥¶Êà∑ÊâçËÉΩËÆøÈóÆÁÆ°ÁêÜÂêéÂè∞ÔºÅ\n\nPlease log in to your merchant account first!');
        // Ë∑≥ËΩ¨Âà∞ÂïÜÂÆ∂ÁôªÂΩïÈ°µÈù¢
        window.location.href = 'merchant-login.html';
        return;
    }
    
    try {
        const merchantData = JSON.parse(merchantLogin);
        const restaurantId = merchantData.restaurant?.id || merchantData.restaurantId || 'default';
        
        // Ë∑≥ËΩ¨Âà∞‰∏ì‰∏öÁöÑÂïÜÂÆ∂ÁÆ°ÁêÜdashboard
        const dashboardUrl = `merchant-dashboard.html?restaurant=${restaurantId}&merchant=${encodeURIComponent(merchantData.restaurant?.name || 'ÊàëÁöÑÈ§êÂéÖ')}`;
        window.location.href = dashboardUrl;
        
    } catch (error) {
        console.error('Ëß£ÊûêÂïÜÂÆ∂ÁôªÂΩïÊï∞ÊçÆÂ§±Ë¥•:', error);
        alert('ÁôªÂΩïÁä∂ÊÄÅÂºÇÂ∏∏ÔºåËØ∑ÈáçÊñ∞ÁôªÂΩïÔºÅ');
        localStorage.removeItem('merchantLogin');
        window.location.href = 'merchant-login.html';
    }
}

// ‰∏∫ÂïÜÂÆ∂ÊåâÈíÆÊ∑ªÂä†ÁôªÂΩïÊ£ÄÊü•
function goToMerchantLogin() {
    // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÁôªÂΩï
    const merchantLogin = localStorage.getItem('merchantLogin');
    
    if (merchantLogin) {
        // Â∑≤ÁôªÂΩïÔºåÁõ¥Êé•Ë∑≥ËΩ¨Âà∞ÁÆ°ÁêÜÂêéÂè∞
        goToMerchantDashboard();
    } else {
        // Êú™ÁôªÂΩïÔºåË∑≥ËΩ¨Âà∞ÁôªÂΩïÈ°µÈù¢
        window.location.href = 'merchant-login.html';
    }
}


// PWA ÊîØÊåÅ
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
            .then((registration) => {
                console.log('SW registered: ', registration);
            })
            .catch((registrationError) => {
                console.log('SW registration failed: ', registrationError);
            });
    });
}