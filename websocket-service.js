// MapleTable WebSocket实时通信服务
class WebSocketService {
    constructor() {
        this.socket = null;
        this.isConnected = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.reconnectDelay = 1000;
        this.messageQueue = [];
        this.subscribers = new Map();
        this.pingInterval = null;
        this.currentUser = null;
        
        // WebSocket服务器地址
        this.wsUrl = window.location.hostname === 'localhost' ? 
            'ws://localhost:3001/ws' : 
            'wss://api.mapletable.ca/ws';
    }
    
    // 连接WebSocket
    connect(userId = null) {
        if (this.socket && this.socket.readyState === WebSocket.OPEN) {
            console.log('🔌 WebSocket already connected');
            return;
        }
        
        this.currentUser = userId;
        
        try {
            this.socket = new WebSocket(`${this.wsUrl}?userId=${userId || 'anonymous'}`);
            
            this.socket.onopen = this.onOpen.bind(this);
            this.socket.onmessage = this.onMessage.bind(this);
            this.socket.onclose = this.onClose.bind(this);
            this.socket.onerror = this.onError.bind(this);
            
            console.log('🔌 尝试连接WebSocket...', this.wsUrl);
            
        } catch (error) {
            console.error('WebSocket连接失败:', error);
            this.scheduleReconnect();
        }
    }
    
    // 连接成功
    onOpen(event) {
        console.log('✅ WebSocket连接成功');
        this.isConnected = true;
        this.reconnectAttempts = 0;
        
        // 发送认证信息
        this.authenticate();
        
        // 发送积压的消息
        this.processMessageQueue();
        
        // 开始心跳检测
        this.startPingInterval();
        
        // 通知订阅者
        this.notifySubscribers('connection', { status: 'connected' });
    }
    
    // 接收消息
    onMessage(event) {
        try {
            const message = JSON.parse(event.data);
            console.log('📨 收到WebSocket消息:', message);
            
            this.handleMessage(message);
            
        } catch (error) {
            console.error('WebSocket消息解析失败:', error);
        }
    }
    
    // 连接关闭\n    onClose(event) {\n        console.log('🔌 WebSocket连接关闭:', event.code, event.reason);\n        this.isConnected = false;\n        this.clearPingInterval();\n        \n        // 非正常关闭时尝试重连\n        if (event.code !== 1000 && event.code !== 1001) {\n            this.scheduleReconnect();\n        }\n        \n        // 通知订阅者\n        this.notifySubscribers('connection', { status: 'disconnected', code: event.code });\n    }\n    \n    // 连接错误\n    onError(error) {\n        console.error('❌ WebSocket错误:', error);\n        this.notifySubscribers('error', { error });\n    }\n    \n    // 处理接收到的消息\n    handleMessage(message) {\n        const { type, data, timestamp } = message;\n        \n        switch (type) {\n            case 'booking_confirmed':\n                this.handleBookingConfirmed(data);\n                break;\n                \n            case 'booking_cancelled':\n                this.handleBookingCancelled(data);\n                break;\n                \n            case 'table_ready':\n                this.handleTableReady(data);\n                break;\n                \n            case 'booking_reminder':\n                this.handleBookingReminder(data);\n                break;\n                \n            case 'restaurant_update':\n                this.handleRestaurantUpdate(data);\n                break;\n                \n            case 'promotion':\n                this.handlePromotion(data);\n                break;\n                \n            case 'system_notification':\n                this.handleSystemNotification(data);\n                break;\n                \n            case 'merchant_notification':\n                this.handleMerchantNotification(data);\n                break;\n                \n            case 'pong':\n                // 心跳响应\n                break;\n                \n            default:\n                console.warn('未知消息类型:', type);\n        }\n        \n        // 通知所有订阅者\n        this.notifySubscribers(type, data);\n    }\n    \n    // 处理预订确认\n    handleBookingConfirmed(data) {\n        const { bookingId, restaurantName, date, time } = data;\n        \n        // 显示通知\n        this.showNotification({\n            title: '🎉 Reservation Confirmed!',\n            titleF: '🎉 Réservation Confirmée!',\n            body: `Your table at ${restaurantName} on ${date} at ${time} is confirmed.`,\n            bodyF: `Votre table chez ${restaurantName} le ${date} à ${time} est confirmée.`,\n            type: 'success',\n            actions: [\n                { text: 'View Details', textF: 'Voir Détails', action: 'view_booking', bookingId },\n                { text: 'Add to Calendar', textF: 'Ajouter au Calendrier', action: 'add_calendar', bookingId }\n            ]\n        });\n        \n        // 触觉反馈\n        this.triggerHaptic('success');\n    }\n    \n    // 处理预订取消\n    handleBookingCancelled(data) {\n        const { bookingId, restaurantName, reason } = data;\n        \n        this.showNotification({\n            title: '❌ Reservation Cancelled',\n            titleF: '❌ Réservation Annulée',\n            body: `Your reservation at ${restaurantName} has been cancelled. ${reason || ''}`,\n            bodyF: `Votre réservation chez ${restaurantName} a été annulée. ${reason || ''}`,\n            type: 'warning',\n            actions: [\n                { text: 'Find Alternative', textF: 'Trouver Alternative', action: 'find_alternative' }\n            ]\n        });\n    }\n    \n    // 处理桌位就绪\n    handleTableReady(data) {\n        const { bookingId, restaurantName, tableNumber } = data;\n        \n        this.showNotification({\n            title: '🍽️ Your Table is Ready!',\n            titleF: '🍽️ Votre Table est Prête!',\n            body: `Table ${tableNumber} at ${restaurantName} is ready for you.`,\n            bodyF: `La table ${tableNumber} chez ${restaurantName} vous attend.`,\n            type: 'info',\n            urgent: true,\n            actions: [\n                { text: 'I\\'m on my way', textF: 'J\\'arrive', action: 'confirm_arrival', bookingId },\n                { text: 'Need more time', textF: 'Besoin de temps', action: 'delay_arrival', bookingId }\n            ]\n        });\n        \n        this.triggerHaptic('notification');\n    }\n    \n    // 处理预订提醒\n    handleBookingReminder(data) {\n        const { bookingId, restaurantName, timeUntil, address } = data;\n        \n        this.showNotification({\n            title: '⏰ Upcoming Reservation',\n            titleF: '⏰ Réservation Prochaine',\n            body: `Your reservation at ${restaurantName} is in ${timeUntil}. Don't forget!`,\n            bodyF: `Votre réservation chez ${restaurantName} est dans ${timeUntil}. N'oubliez pas!`,\n            type: 'info',\n            actions: [\n                { text: 'Get Directions', textF: 'Itinéraire', action: 'get_directions', address },\n                { text: 'Call Restaurant', textF: 'Appeler', action: 'call_restaurant', bookingId }\n            ]\n        });\n    }\n    \n    // 处理餐厅更新\n    handleRestaurantUpdate(data) {\n        const { restaurantId, updateType, message } = data;\n        \n        if (updateType === 'menu_update') {\n            this.showNotification({\n                title: '🍽️ Menu Updated',\n                titleF: '🍽️ Menu Mis à Jour',\n                body: message,\n                type: 'info'\n            });\n        } else if (updateType === 'special_offer') {\n            this.showNotification({\n                title: '🎁 Special Offer',\n                titleF: '🎁 Offre Spéciale',\n                body: message,\n                type: 'promotion'\n            });\n        }\n    }\n    \n    // 处理推广活动\n    handlePromotion(data) {\n        const { title, message, restaurantName, discount, validUntil } = data;\n        \n        this.showNotification({\n            title: `🎉 ${title}`,\n            body: `${message} at ${restaurantName}. Valid until ${validUntil}`,\n            bodyF: `${message} chez ${restaurantName}. Valable jusqu'au ${validUntil}`,\n            type: 'promotion',\n            actions: [\n                { text: 'Book Now', textF: 'Réserver', action: 'book_promotion', data },\n                { text: 'Save Offer', textF: 'Sauvegarder', action: 'save_offer', data }\n            ]\n        });\n    }\n    \n    // 处理系统通知\n    handleSystemNotification(data) {\n        const { level, message, messageF } = data;\n        \n        this.showNotification({\n            title: level === 'urgent' ? '🚨 Important Notice' : 'ℹ️ System Notice',\n            titleF: level === 'urgent' ? '🚨 Avis Important' : 'ℹ️ Avis Système',\n            body: message,\n            bodyF: messageF,\n            type: level === 'urgent' ? 'error' : 'info'\n        });\n    }\n    \n    // 处理商家通知\n    handleMerchantNotification(data) {\n        // 只有商家用户才处理这类通知\n        if (!this.isMerchantUser()) return;\n        \n        const { notificationType, booking, message } = data;\n        \n        switch (notificationType) {\n            case 'new_booking':\n                this.showNotification({\n                    title: '📅 New Booking',\n                    titleF: '📅 Nouvelle Réservation',\n                    body: `New reservation for ${booking.partySize} people at ${booking.time}`,\n                    bodyF: `Nouvelle réservation pour ${booking.partySize} personnes à ${booking.time}`,\n                    type: 'info',\n                    actions: [\n                        { text: 'View Details', textF: 'Voir Détails', action: 'view_merchant_booking', bookingId: booking.id }\n                    ]\n                });\n                break;\n                \n            case 'booking_modification':\n                this.showNotification({\n                    title: '✏️ Booking Modified',\n                    titleF: '✏️ Réservation Modifiée',\n                    body: message,\n                    type: 'info'\n                });\n                break;\n        }\n    }\n    \n    // 发送消息到服务器\n    sendMessage(message) {\n        if (this.isConnected && this.socket) {\n            try {\n                this.socket.send(JSON.stringify({\n                    ...message,\n                    timestamp: Date.now(),\n                    userId: this.currentUser\n                }));\n                return true;\n            } catch (error) {\n                console.error('发送WebSocket消息失败:', error);\n                this.messageQueue.push(message);\n                return false;\n            }\n        } else {\n            console.warn('WebSocket未连接，消息已加入队列');\n            this.messageQueue.push(message);\n            return false;\n        }\n    }\n    \n    // 认证用户\n    authenticate() {\n        const token = localStorage.getItem('mapletable_auth_token') || \n                      localStorage.getItem('mapletable_merchant_token');\n        \n        if (token) {\n            this.sendMessage({\n                type: 'authenticate',\n                data: { token, userId: this.currentUser }\n            });\n        }\n    }\n    \n    // 处理消息队列\n    processMessageQueue() {\n        while (this.messageQueue.length > 0) {\n            const message = this.messageQueue.shift();\n            this.sendMessage(message);\n        }\n    }\n    \n    // 开始心跳检测\n    startPingInterval() {\n        this.pingInterval = setInterval(() => {\n            if (this.isConnected) {\n                this.sendMessage({ type: 'ping' });\n            }\n        }, 30000); // 每30秒发送一次心跳\n    }\n    \n    // 停止心跳检测\n    clearPingInterval() {\n        if (this.pingInterval) {\n            clearInterval(this.pingInterval);\n            this.pingInterval = null;\n        }\n    }\n    \n    // 计划重连\n    scheduleReconnect() {\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.reconnectAttempts++;\n            const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\n            \n            console.log(`🔄 ${delay}ms后尝试重连 (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n            \n            setTimeout(() => {\n                this.connect(this.currentUser);\n            }, delay);\n        } else {\n            console.error('❌ WebSocket重连达到最大次数限制');\n        }\n    }\n    \n    // 断开连接\n    disconnect() {\n        if (this.socket) {\n            this.socket.close(1000, 'User disconnection');\n            this.socket = null;\n        }\n        this.clearPingInterval();\n        this.isConnected = false;\n        console.log('🔌 WebSocket已断开');\n    }\n    \n    // 订阅消息类型\n    subscribe(messageType, callback) {\n        if (!this.subscribers.has(messageType)) {\n            this.subscribers.set(messageType, new Set());\n        }\n        this.subscribers.get(messageType).add(callback);\n        \n        // 返回取消订阅函数\n        return () => {\n            this.unsubscribe(messageType, callback);\n        };\n    }\n    \n    // 取消订阅\n    unsubscribe(messageType, callback) {\n        const callbacks = this.subscribers.get(messageType);\n        if (callbacks) {\n            callbacks.delete(callback);\n        }\n    }\n    \n    // 通知订阅者\n    notifySubscribers(messageType, data) {\n        const callbacks = this.subscribers.get(messageType);\n        if (callbacks) {\n            callbacks.forEach(callback => {\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error('订阅者回调执行失败:', error);\n                }\n            });\n        }\n    }\n    \n    // 显示通知\n    showNotification({ title, titleF, body, bodyF, type = 'info', urgent = false, actions = [] }) {\n        const currentLang = localStorage.getItem('mapleTableLanguage') || 'en';\n        const finalTitle = currentLang === 'fr' && titleF ? titleF : title;\n        const finalBody = currentLang === 'fr' && bodyF ? bodyF : body;\n        \n        // 尝试显示原生通知\n        if ('Notification' in window && Notification.permission === 'granted') {\n            const notification = new Notification(finalTitle, {\n                body: finalBody,\n                icon: '/android-chrome-192x192.png',\n                badge: '/android-chrome-192x192.png',\n                tag: type,\n                requireInteraction: urgent\n            });\n            \n            // 点击通知的处理\n            notification.onclick = () => {\n                window.focus();\n                if (actions.length > 0) {\n                    this.handleNotificationAction(actions[0]);\n                }\n                notification.close();\n            };\n        }\n        \n        // 同时显示应用内通知\n        this.showInAppNotification({\n            title: finalTitle,\n            body: finalBody,\n            type,\n            actions,\n            urgent\n        });\n    }\n    \n    // 显示应用内通知\n    showInAppNotification({ title, body, type, actions, urgent }) {\n        // 创建通知元素\n        const notification = document.createElement('div');\n        notification.className = `notification in-app-notification ${type} ${urgent ? 'urgent' : ''}`;\n        \n        notification.innerHTML = `\n            <div class=\"notification-content\">\n                <div class=\"notification-header\">\n                    <h4>${title}</h4>\n                    <button class=\"close-notification\" onclick=\"this.parentElement.parentElement.parentElement.remove()\">\n                        <i class=\"fas fa-times\"></i>\n                    </button>\n                </div>\n                <p>${body}</p>\n                ${actions.length > 0 ? `\n                    <div class=\"notification-actions\">\n                        ${actions.map((action, index) => `\n                            <button class=\"notification-action\" onclick=\"wsService.handleNotificationAction(${JSON.stringify(action).replace(/\"/g, '&quot;')})\">\n                                ${action.text}\n                            </button>\n                        `).join('')}\n                    </div>\n                ` : ''}\n            </div>\n        `;\n        \n        // 添加到页面\n        document.body.appendChild(notification);\n        \n        // 自动移除（除非是紧急通知）\n        if (!urgent) {\n            setTimeout(() => {\n                if (notification.parentNode) {\n                    notification.remove();\n                }\n            }, 8000);\n        }\n    }\n    \n    // 处理通知动作\n    handleNotificationAction(action) {\n        switch (action.action) {\n            case 'view_booking':\n                window.location.href = `reservations.html?booking=${action.bookingId}`;\n                break;\n            case 'add_calendar':\n                this.addBookingToCalendar(action.bookingId);\n                break;\n            case 'find_alternative':\n                window.location.href = 'index.html';\n                break;\n            case 'get_directions':\n                this.openDirections(action.address);\n                break;\n            case 'call_restaurant':\n                this.callRestaurant(action.bookingId);\n                break;\n            // ... 更多动作处理\n        }\n    }\n    \n    // 触觉反馈\n    triggerHaptic(type) {\n        if (window.Capacitor && window.Capacitor.Plugins.Haptics) {\n            try {\n                const { Haptics } = window.Capacitor.Plugins;\n                switch (type) {\n                    case 'success':\n                        Haptics.notification({ type: 'SUCCESS' });\n                        break;\n                    case 'warning':\n                        Haptics.notification({ type: 'WARNING' });\n                        break;\n                    case 'error':\n                        Haptics.notification({ type: 'ERROR' });\n                        break;\n                    default:\n                        Haptics.impact({ style: 'LIGHT' });\n                }\n            } catch (error) {\n                console.warn('触觉反馈失败:', error);\n            }\n        }\n    }\n    \n    // 检查是否为商家用户\n    isMerchantUser() {\n        return localStorage.getItem('mapletable_merchant_token') !== null;\n    }\n    \n    // 工具方法\n    openDirections(address) {\n        const url = `https://maps.google.com/maps?daddr=${encodeURIComponent(address)}`;\n        window.open(url, '_blank');\n    }\n    \n    callRestaurant(bookingId) {\n        // 从本地数据或API获取餐厅电话\n        const bookings = JSON.parse(localStorage.getItem('mapleTableBookings') || '[]');\n        const booking = bookings.find(b => b.id === bookingId);\n        if (booking && booking.restaurantPhone) {\n            window.location.href = `tel:${booking.restaurantPhone}`;\n        }\n    }\n    \n    addBookingToCalendar(bookingId) {\n        // Google Calendar集成\n        const bookings = JSON.parse(localStorage.getItem('mapleTableBookings') || '[]');\n        const booking = bookings.find(b => b.id === bookingId);\n        if (booking) {\n            const startDate = new Date(`${booking.date}T${booking.time}:00`);\n            const endDate = new Date(startDate.getTime() + 2 * 60 * 60 * 1000);\n            \n            const googleUrl = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent('Dinner at ' + booking.restaurantName)}&dates=${startDate.toISOString().replace(/[-:]/g, '').split('.')[0]}Z/${endDate.toISOString().replace(/[-:]/g, '').split('.')[0]}Z`;\n            \n            window.open(googleUrl, '_blank');\n        }\n    }\n}\n\n// 创建全局WebSocket服务实例\nconst wsService = new WebSocketService();\n\n// 导出服务\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = WebSocketService;\n} else if (typeof window !== 'undefined') {\n    window.WebSocketService = WebSocketService;\n    window.wsService = wsService;\n}\n\nconsole.log('🔄 MapleTable WebSocket Service initialized');